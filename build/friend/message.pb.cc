// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace XuChat {
PROTOBUF_CONSTEXPR GetHistoryMsgReq::GetHistoryMsgReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_time_(int64_t{0})
  , over_time_(int64_t{0}){}
struct GetHistoryMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHistoryMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHistoryMsgReqDefaultTypeInternal() {}
  union {
    GetHistoryMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHistoryMsgReqDefaultTypeInternal _GetHistoryMsgReq_default_instance_;
PROTOBUF_CONSTEXPR GetHistoryMsgRsp::GetHistoryMsgRsp(
    ::_pbi::ConstantInitialized)
  : msg_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetHistoryMsgRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHistoryMsgRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHistoryMsgRspDefaultTypeInternal() {}
  union {
    GetHistoryMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHistoryMsgRspDefaultTypeInternal _GetHistoryMsgRsp_default_instance_;
PROTOBUF_CONSTEXPR GetRecentMsgReq::GetRecentMsgReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , msg_count_(int64_t{0})
  , cur_time_(int64_t{0}){}
struct GetRecentMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecentMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecentMsgReqDefaultTypeInternal() {}
  union {
    GetRecentMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecentMsgReqDefaultTypeInternal _GetRecentMsgReq_default_instance_;
PROTOBUF_CONSTEXPR GetRecentMsgRsp::GetRecentMsgRsp(
    ::_pbi::ConstantInitialized)
  : msg_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetRecentMsgRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecentMsgRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecentMsgRspDefaultTypeInternal() {}
  union {
    GetRecentMsgRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecentMsgRspDefaultTypeInternal _GetRecentMsgRsp_default_instance_;
PROTOBUF_CONSTEXPR MsgSearchReq::MsgSearchReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , search_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MsgSearchReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSearchReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSearchReqDefaultTypeInternal() {}
  union {
    MsgSearchReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSearchReqDefaultTypeInternal _MsgSearchReq_default_instance_;
PROTOBUF_CONSTEXPR MsgSearchRsp::MsgSearchRsp(
    ::_pbi::ConstantInitialized)
  : msg_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct MsgSearchRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSearchRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSearchRspDefaultTypeInternal() {}
  union {
    MsgSearchRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSearchRspDefaultTypeInternal _MsgSearchRsp_default_instance_;
}  // namespace XuChat
static ::_pb::Metadata file_level_metadata_message_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_message_2eproto[1];

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, chat_session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, start_time_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, over_time_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgReq, session_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetHistoryMsgRsp, msg_list_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, chat_session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, msg_count_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, cur_time_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgReq, session_id_),
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetRecentMsgRsp, msg_list_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, chat_session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchReq, search_key_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::MsgSearchRsp, msg_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::XuChat::GetHistoryMsgReq)},
  { 18, -1, -1, sizeof(::XuChat::GetHistoryMsgRsp)},
  { 28, 40, -1, sizeof(::XuChat::GetRecentMsgReq)},
  { 46, -1, -1, sizeof(::XuChat::GetRecentMsgRsp)},
  { 56, 67, -1, sizeof(::XuChat::MsgSearchReq)},
  { 72, -1, -1, sizeof(::XuChat::MsgSearchRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::XuChat::_GetHistoryMsgReq_default_instance_._instance,
  &::XuChat::_GetHistoryMsgRsp_default_instance_._instance,
  &::XuChat::_GetRecentMsgReq_default_instance_._instance,
  &::XuChat::_GetRecentMsgRsp_default_instance_._instance,
  &::XuChat::_MsgSearchReq_default_instance_._instance,
  &::XuChat::_MsgSearchRsp_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\006XuChat\032\nbase.proto\"\260\001\n\020"
  "GetHistoryMsgReq\022\022\n\nrequest_id\030\001 \001(\t\022\027\n\017"
  "chat_session_id\030\002 \001(\t\022\022\n\nstart_time\030\003 \001("
  "\003\022\021\n\tover_time\030\004 \001(\003\022\024\n\007user_id\030\005 \001(\tH\000\210"
  "\001\001\022\027\n\nsession_id\030\006 \001(\tH\001\210\001\001B\n\n\010_user_idB"
  "\r\n\013_session_id\"n\n\020GetHistoryMsgRsp\022\022\n\nre"
  "quest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errms"
  "g\030\003 \001(\t\022%\n\010msg_list\030\004 \003(\0132\023.XuChat.Messa"
  "geInfo\"\277\001\n\017GetRecentMsgReq\022\022\n\nrequest_id"
  "\030\001 \001(\t\022\027\n\017chat_session_id\030\002 \001(\t\022\021\n\tmsg_c"
  "ount\030\003 \001(\003\022\025\n\010cur_time\030\004 \001(\003H\000\210\001\001\022\024\n\007use"
  "r_id\030\005 \001(\tH\001\210\001\001\022\027\n\nsession_id\030\006 \001(\tH\002\210\001\001"
  "B\013\n\t_cur_timeB\n\n\010_user_idB\r\n\013_session_id"
  "\"m\n\017GetRecentMsgRsp\022\022\n\nrequest_id\030\001 \001(\t\022"
  "\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022%\n\010msg_"
  "list\030\004 \003(\0132\023.XuChat.MessageInfo\"\231\001\n\014MsgS"
  "earchReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007user_id\030"
  "\002 \001(\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\tH\001\210\001\001\022\027\n\017c"
  "hat_session_id\030\004 \001(\t\022\022\n\nsearch_key\030\005 \001(\t"
  "B\n\n\010_user_idB\r\n\013_session_id\"j\n\014MsgSearch"
  "Rsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010"
  "\022\016\n\006errmsg\030\003 \001(\t\022%\n\010msg_list\030\004 \003(\0132\023.XuC"
  "hat.MessageInfo2\323\001\n\021MsgStorageService\022C\n"
  "\rGetHistoryMsg\022\030.XuChat.GetHistoryMsgReq"
  "\032\030.XuChat.GetHistoryMsgRsp\022@\n\014GetRecentM"
  "sg\022\027.XuChat.GetRecentMsgReq\032\027.XuChat.Get"
  "RecentMsgRsp\0227\n\tMsgSearch\022\024.XuChat.MsgSe"
  "archReq\032\024.XuChat.MsgSearchRspB\003\200\001\001b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_message_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 1122, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace XuChat {

// ===================================================================

class GetHistoryMsgReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetHistoryMsgReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetHistoryMsgReq::GetHistoryMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetHistoryMsgReq)
}
GetHistoryMsgReq::GetHistoryMsgReq(const GetHistoryMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  chat_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_session_id().empty()) {
    chat_session_id_.Set(from._internal_chat_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&over_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(over_time_));
  // @@protoc_insertion_point(copy_constructor:XuChat.GetHistoryMsgReq)
}

inline void GetHistoryMsgReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&over_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(over_time_));
}

GetHistoryMsgReq::~GetHistoryMsgReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetHistoryMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHistoryMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  chat_session_id_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
}

void GetHistoryMsgReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetHistoryMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetHistoryMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  chat_session_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(over_time_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHistoryMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgReq.chat_session_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 over_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          over_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHistoryMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetHistoryMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string chat_session_id = 2;
  if (!this->_internal_chat_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_session_id().data(), static_cast<int>(this->_internal_chat_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgReq.chat_session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_session_id(), target);
  }

  // int64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_time(), target);
  }

  // int64 over_time = 4;
  if (this->_internal_over_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_over_time(), target);
  }

  // optional string user_id = 5;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgReq.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // optional string session_id = 6;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgReq.session_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetHistoryMsgReq)
  return target;
}

size_t GetHistoryMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetHistoryMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string chat_session_id = 2;
  if (!this->_internal_chat_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_session_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // int64 start_time = 3;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int64 over_time = 4;
  if (this->_internal_over_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_over_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHistoryMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetHistoryMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHistoryMsgReq::GetClassData() const { return &_class_data_; }

void GetHistoryMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetHistoryMsgReq *>(to)->MergeFrom(
      static_cast<const GetHistoryMsgReq &>(from));
}


void GetHistoryMsgReq::MergeFrom(const GetHistoryMsgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetHistoryMsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_chat_session_id().empty()) {
    _internal_set_chat_session_id(from._internal_chat_session_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_over_time() != 0) {
    _internal_set_over_time(from._internal_over_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHistoryMsgReq::CopyFrom(const GetHistoryMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetHistoryMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryMsgReq::IsInitialized() const {
  return true;
}

void GetHistoryMsgReq::InternalSwap(GetHistoryMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_session_id_, lhs_arena,
      &other->chat_session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHistoryMsgReq, over_time_)
      + sizeof(GetHistoryMsgReq::over_time_)
      - PROTOBUF_FIELD_OFFSET(GetHistoryMsgReq, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHistoryMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class GetHistoryMsgRsp::_Internal {
 public:
};

void GetHistoryMsgRsp::clear_msg_list() {
  msg_list_.Clear();
}
GetHistoryMsgRsp::GetHistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetHistoryMsgRsp)
}
GetHistoryMsgRsp::GetHistoryMsgRsp(const GetHistoryMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetHistoryMsgRsp)
}

inline void GetHistoryMsgRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetHistoryMsgRsp::~GetHistoryMsgRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetHistoryMsgRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHistoryMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetHistoryMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetHistoryMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetHistoryMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHistoryMsgRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetHistoryMsgRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.MessageInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHistoryMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetHistoryMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetHistoryMsgRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.MessageInfo msg_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetHistoryMsgRsp)
  return target;
}

size_t GetHistoryMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetHistoryMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.MessageInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHistoryMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetHistoryMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHistoryMsgRsp::GetClassData() const { return &_class_data_; }

void GetHistoryMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetHistoryMsgRsp *>(to)->MergeFrom(
      static_cast<const GetHistoryMsgRsp &>(from));
}


void GetHistoryMsgRsp::MergeFrom(const GetHistoryMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetHistoryMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHistoryMsgRsp::CopyFrom(const GetHistoryMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetHistoryMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryMsgRsp::IsInitialized() const {
  return true;
}

void GetHistoryMsgRsp::InternalSwap(GetHistoryMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHistoryMsgRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class GetRecentMsgReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRecentMsgReq>()._has_bits_);
  static void set_has_cur_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetRecentMsgReq::GetRecentMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetRecentMsgReq)
}
GetRecentMsgReq::GetRecentMsgReq(const GetRecentMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  chat_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_session_id().empty()) {
    chat_session_id_.Set(from._internal_chat_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_count_, &from.msg_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_time_) -
    reinterpret_cast<char*>(&msg_count_)) + sizeof(cur_time_));
  // @@protoc_insertion_point(copy_constructor:XuChat.GetRecentMsgReq)
}

inline void GetRecentMsgReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cur_time_) -
    reinterpret_cast<char*>(&msg_count_)) + sizeof(cur_time_));
}

GetRecentMsgReq::~GetRecentMsgReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetRecentMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecentMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  chat_session_id_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
}

void GetRecentMsgReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRecentMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetRecentMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  chat_session_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  msg_count_ = int64_t{0};
  cur_time_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecentMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgReq.chat_session_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 msg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 cur_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cur_time(&has_bits);
          cur_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecentMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetRecentMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string chat_session_id = 2;
  if (!this->_internal_chat_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_session_id().data(), static_cast<int>(this->_internal_chat_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgReq.chat_session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_session_id(), target);
  }

  // int64 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_msg_count(), target);
  }

  // optional int64 cur_time = 4;
  if (_internal_has_cur_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_cur_time(), target);
  }

  // optional string user_id = 5;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgReq.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // optional string session_id = 6;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgReq.session_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetRecentMsgReq)
  return target;
}

size_t GetRecentMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetRecentMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string chat_session_id = 2;
  if (!this->_internal_chat_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_session_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // int64 msg_count = 3;
  if (this->_internal_msg_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msg_count());
  }

  // optional int64 cur_time = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cur_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecentMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRecentMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecentMsgReq::GetClassData() const { return &_class_data_; }

void GetRecentMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRecentMsgReq *>(to)->MergeFrom(
      static_cast<const GetRecentMsgReq &>(from));
}


void GetRecentMsgReq::MergeFrom(const GetRecentMsgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetRecentMsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_chat_session_id().empty()) {
    _internal_set_chat_session_id(from._internal_chat_session_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  if (from._internal_msg_count() != 0) {
    _internal_set_msg_count(from._internal_msg_count());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_cur_time(from._internal_cur_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecentMsgReq::CopyFrom(const GetRecentMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetRecentMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecentMsgReq::IsInitialized() const {
  return true;
}

void GetRecentMsgReq::InternalSwap(GetRecentMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_session_id_, lhs_arena,
      &other->chat_session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecentMsgReq, cur_time_)
      + sizeof(GetRecentMsgReq::cur_time_)
      - PROTOBUF_FIELD_OFFSET(GetRecentMsgReq, msg_count_)>(
          reinterpret_cast<char*>(&msg_count_),
          reinterpret_cast<char*>(&other->msg_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecentMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class GetRecentMsgRsp::_Internal {
 public:
};

void GetRecentMsgRsp::clear_msg_list() {
  msg_list_.Clear();
}
GetRecentMsgRsp::GetRecentMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetRecentMsgRsp)
}
GetRecentMsgRsp::GetRecentMsgRsp(const GetRecentMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetRecentMsgRsp)
}

inline void GetRecentMsgRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetRecentMsgRsp::~GetRecentMsgRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetRecentMsgRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecentMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetRecentMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRecentMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetRecentMsgRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecentMsgRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetRecentMsgRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.MessageInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecentMsgRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetRecentMsgRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetRecentMsgRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.MessageInfo msg_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetRecentMsgRsp)
  return target;
}

size_t GetRecentMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetRecentMsgRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.MessageInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecentMsgRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRecentMsgRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecentMsgRsp::GetClassData() const { return &_class_data_; }

void GetRecentMsgRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRecentMsgRsp *>(to)->MergeFrom(
      static_cast<const GetRecentMsgRsp &>(from));
}


void GetRecentMsgRsp::MergeFrom(const GetRecentMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetRecentMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecentMsgRsp::CopyFrom(const GetRecentMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetRecentMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecentMsgRsp::IsInitialized() const {
  return true;
}

void GetRecentMsgRsp::InternalSwap(GetRecentMsgRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecentMsgRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class MsgSearchReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgSearchReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MsgSearchReq::MsgSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.MsgSearchReq)
}
MsgSearchReq::MsgSearchReq(const MsgSearchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  chat_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_session_id().empty()) {
    chat_session_id_.Set(from._internal_chat_session_id(), 
      GetArenaForAllocation());
  }
  search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_key().empty()) {
    search_key_.Set(from._internal_search_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.MsgSearchReq)
}

inline void MsgSearchReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgSearchReq::~MsgSearchReq() {
  // @@protoc_insertion_point(destructor:XuChat.MsgSearchReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSearchReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
  chat_session_id_.Destroy();
  search_key_.Destroy();
}

void MsgSearchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgSearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.MsgSearchReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  chat_session_id_.ClearToEmpty();
  search_key_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSearchReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchReq.chat_session_id"));
        } else
          goto handle_unusual;
        continue;
      // string search_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchReq.search_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgSearchReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.MsgSearchReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string chat_session_id = 4;
  if (!this->_internal_chat_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_session_id().data(), static_cast<int>(this->_internal_chat_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchReq.chat_session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat_session_id(), target);
  }

  // string search_key = 5;
  if (!this->_internal_search_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchReq.search_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_search_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.MsgSearchReq)
  return target;
}

size_t MsgSearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.MsgSearchReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // string chat_session_id = 4;
  if (!this->_internal_chat_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_session_id());
  }

  // string search_key = 5;
  if (!this->_internal_search_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSearchReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgSearchReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSearchReq::GetClassData() const { return &_class_data_; }

void MsgSearchReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgSearchReq *>(to)->MergeFrom(
      static_cast<const MsgSearchReq &>(from));
}


void MsgSearchReq::MergeFrom(const MsgSearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.MsgSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_chat_session_id().empty()) {
    _internal_set_chat_session_id(from._internal_chat_session_id());
  }
  if (!from._internal_search_key().empty()) {
    _internal_set_search_key(from._internal_search_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSearchReq::CopyFrom(const MsgSearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.MsgSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSearchReq::IsInitialized() const {
  return true;
}

void MsgSearchReq::InternalSwap(MsgSearchReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_session_id_, lhs_arena,
      &other->chat_session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &search_key_, lhs_arena,
      &other->search_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSearchReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class MsgSearchRsp::_Internal {
 public:
};

void MsgSearchRsp::clear_msg_list() {
  msg_list_.Clear();
}
MsgSearchRsp::MsgSearchRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.MsgSearchRsp)
}
MsgSearchRsp::MsgSearchRsp(const MsgSearchRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.MsgSearchRsp)
}

inline void MsgSearchRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

MsgSearchRsp::~MsgSearchRsp() {
  // @@protoc_insertion_point(destructor:XuChat.MsgSearchRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSearchRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void MsgSearchRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgSearchRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.MsgSearchRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSearchRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.MsgSearchRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.MessageInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgSearchRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.MsgSearchRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.MsgSearchRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.MessageInfo msg_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.MsgSearchRsp)
  return target;
}

size_t MsgSearchRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.MsgSearchRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.MessageInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSearchRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgSearchRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSearchRsp::GetClassData() const { return &_class_data_; }

void MsgSearchRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgSearchRsp *>(to)->MergeFrom(
      static_cast<const MsgSearchRsp &>(from));
}


void MsgSearchRsp::MergeFrom(const MsgSearchRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.MsgSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSearchRsp::CopyFrom(const MsgSearchRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.MsgSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSearchRsp::IsInitialized() const {
  return true;
}

void MsgSearchRsp::InternalSwap(MsgSearchRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSearchRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

MsgStorageService::~MsgStorageService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MsgStorageService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_service_descriptors_message_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MsgStorageService::GetDescriptor() {
  return descriptor();
}

void MsgStorageService::GetHistoryMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetHistoryMsgReq*,
                         ::XuChat::GetHistoryMsgRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetHistoryMsg() not implemented.");
  done->Run();
}

void MsgStorageService::GetRecentMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetRecentMsgReq*,
                         ::XuChat::GetRecentMsgRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRecentMsg() not implemented.");
  done->Run();
}

void MsgStorageService::MsgSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::MsgSearchReq*,
                         ::XuChat::MsgSearchRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MsgSearch() not implemented.");
  done->Run();
}

void MsgStorageService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetHistoryMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetHistoryMsgReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetHistoryMsgRsp*>(
                 response),
             done);
      break;
    case 1:
      GetRecentMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetRecentMsgReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetRecentMsgRsp*>(
                 response),
             done);
      break;
    case 2:
      MsgSearch(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::MsgSearchReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::MsgSearchRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MsgStorageService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::GetHistoryMsgReq::default_instance();
    case 1:
      return ::XuChat::GetRecentMsgReq::default_instance();
    case 2:
      return ::XuChat::MsgSearchReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MsgStorageService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::GetHistoryMsgRsp::default_instance();
    case 1:
      return ::XuChat::GetRecentMsgRsp::default_instance();
    case 2:
      return ::XuChat::MsgSearchRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MsgStorageService_Stub::MsgStorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MsgStorageService_Stub::MsgStorageService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MsgStorageService_Stub::~MsgStorageService_Stub() {
  if (owns_channel_) delete channel_;
}

void MsgStorageService_Stub::GetHistoryMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetHistoryMsgReq* request,
                              ::XuChat::GetHistoryMsgRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MsgStorageService_Stub::GetRecentMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetRecentMsgReq* request,
                              ::XuChat::GetRecentMsgRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MsgStorageService_Stub::MsgSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::MsgSearchReq* request,
                              ::XuChat::MsgSearchRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XuChat::GetHistoryMsgReq*
Arena::CreateMaybeMessage< ::XuChat::GetHistoryMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetHistoryMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetHistoryMsgRsp*
Arena::CreateMaybeMessage< ::XuChat::GetHistoryMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetHistoryMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetRecentMsgReq*
Arena::CreateMaybeMessage< ::XuChat::GetRecentMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetRecentMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetRecentMsgRsp*
Arena::CreateMaybeMessage< ::XuChat::GetRecentMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetRecentMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::MsgSearchReq*
Arena::CreateMaybeMessage< ::XuChat::MsgSearchReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::MsgSearchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::MsgSearchRsp*
Arena::CreateMaybeMessage< ::XuChat::MsgSearchRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::MsgSearchRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
