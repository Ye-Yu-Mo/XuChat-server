// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace XuChat {
PROTOBUF_CONSTEXPR GetFriendListReq::GetFriendListReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetFriendListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFriendListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFriendListReqDefaultTypeInternal() {}
  union {
    GetFriendListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFriendListReqDefaultTypeInternal _GetFriendListReq_default_instance_;
PROTOBUF_CONSTEXPR GetFriendListRsp::GetFriendListRsp(
    ::_pbi::ConstantInitialized)
  : friend_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetFriendListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFriendListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFriendListRspDefaultTypeInternal() {}
  union {
    GetFriendListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFriendListRspDefaultTypeInternal _GetFriendListRsp_default_instance_;
PROTOBUF_CONSTEXPR FriendRemoveReq::FriendRemoveReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , peer_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FriendRemoveReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendRemoveReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendRemoveReqDefaultTypeInternal() {}
  union {
    FriendRemoveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendRemoveReqDefaultTypeInternal _FriendRemoveReq_default_instance_;
PROTOBUF_CONSTEXPR FriendRemoveRsp::FriendRemoveRsp(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct FriendRemoveRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendRemoveRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendRemoveRspDefaultTypeInternal() {}
  union {
    FriendRemoveRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendRemoveRspDefaultTypeInternal _FriendRemoveRsp_default_instance_;
PROTOBUF_CONSTEXPR FriendAddReq::FriendAddReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , respondent_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FriendAddReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddReqDefaultTypeInternal() {}
  union {
    FriendAddReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddReqDefaultTypeInternal _FriendAddReq_default_instance_;
PROTOBUF_CONSTEXPR FriendAddRsp::FriendAddRsp(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notify_event_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct FriendAddRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddRspDefaultTypeInternal() {}
  union {
    FriendAddRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddRspDefaultTypeInternal _FriendAddRsp_default_instance_;
PROTOBUF_CONSTEXPR FriendAddProcessReq::FriendAddProcessReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notify_event_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , apply_user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agree_(false){}
struct FriendAddProcessReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddProcessReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddProcessReqDefaultTypeInternal() {}
  union {
    FriendAddProcessReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddProcessReqDefaultTypeInternal _FriendAddProcessReq_default_instance_;
PROTOBUF_CONSTEXPR FriendAddProcessRsp::FriendAddProcessRsp(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , new_session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct FriendAddProcessRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendAddProcessRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendAddProcessRspDefaultTypeInternal() {}
  union {
    FriendAddProcessRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendAddProcessRspDefaultTypeInternal _FriendAddProcessRsp_default_instance_;
PROTOBUF_CONSTEXPR GetPendingFriendEventListReq::GetPendingFriendEventListReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetPendingFriendEventListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPendingFriendEventListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPendingFriendEventListReqDefaultTypeInternal() {}
  union {
    GetPendingFriendEventListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPendingFriendEventListReqDefaultTypeInternal _GetPendingFriendEventListReq_default_instance_;
PROTOBUF_CONSTEXPR FriendEvent::FriendEvent(
    ::_pbi::ConstantInitialized)
  : event_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_(nullptr){}
struct FriendEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendEventDefaultTypeInternal() {}
  union {
    FriendEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendEventDefaultTypeInternal _FriendEvent_default_instance_;
PROTOBUF_CONSTEXPR GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(
    ::_pbi::ConstantInitialized)
  : event_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetPendingFriendEventListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPendingFriendEventListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPendingFriendEventListRspDefaultTypeInternal() {}
  union {
    GetPendingFriendEventListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPendingFriendEventListRspDefaultTypeInternal _GetPendingFriendEventListRsp_default_instance_;
PROTOBUF_CONSTEXPR FriendSearchReq::FriendSearchReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , search_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FriendSearchReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendSearchReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendSearchReqDefaultTypeInternal() {}
  union {
    FriendSearchReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendSearchReqDefaultTypeInternal _FriendSearchReq_default_instance_;
PROTOBUF_CONSTEXPR FriendSearchRsp::FriendSearchRsp(
    ::_pbi::ConstantInitialized)
  : user_info_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct FriendSearchRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendSearchRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendSearchRspDefaultTypeInternal() {}
  union {
    FriendSearchRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendSearchRspDefaultTypeInternal _FriendSearchRsp_default_instance_;
PROTOBUF_CONSTEXPR GetChatSessionListReq::GetChatSessionListReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetChatSessionListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatSessionListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatSessionListReqDefaultTypeInternal() {}
  union {
    GetChatSessionListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatSessionListReqDefaultTypeInternal _GetChatSessionListReq_default_instance_;
PROTOBUF_CONSTEXPR GetChatSessionListRsp::GetChatSessionListRsp(
    ::_pbi::ConstantInitialized)
  : chat_session_info_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetChatSessionListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatSessionListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatSessionListRspDefaultTypeInternal() {}
  union {
    GetChatSessionListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatSessionListRspDefaultTypeInternal _GetChatSessionListRsp_default_instance_;
PROTOBUF_CONSTEXPR ChatSessionCreateReq::ChatSessionCreateReq(
    ::_pbi::ConstantInitialized)
  : member_id_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChatSessionCreateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatSessionCreateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatSessionCreateReqDefaultTypeInternal() {}
  union {
    ChatSessionCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatSessionCreateReqDefaultTypeInternal _ChatSessionCreateReq_default_instance_;
PROTOBUF_CONSTEXPR ChatSessionCreateRsp::ChatSessionCreateRsp(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_info_(nullptr)
  , success_(false){}
struct ChatSessionCreateRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatSessionCreateRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatSessionCreateRspDefaultTypeInternal() {}
  union {
    ChatSessionCreateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatSessionCreateRspDefaultTypeInternal _ChatSessionCreateRsp_default_instance_;
PROTOBUF_CONSTEXPR GetChatSessionMemberReq::GetChatSessionMemberReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetChatSessionMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatSessionMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatSessionMemberReqDefaultTypeInternal() {}
  union {
    GetChatSessionMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatSessionMemberReqDefaultTypeInternal _GetChatSessionMemberReq_default_instance_;
PROTOBUF_CONSTEXPR GetChatSessionMemberRsp::GetChatSessionMemberRsp(
    ::_pbi::ConstantInitialized)
  : member_info_list_()
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct GetChatSessionMemberRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatSessionMemberRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatSessionMemberRspDefaultTypeInternal() {}
  union {
    GetChatSessionMemberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatSessionMemberRspDefaultTypeInternal _GetChatSessionMemberRsp_default_instance_;
}  // namespace XuChat
static ::_pb::Metadata file_level_metadata_friend_2eproto[19];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_friend_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_friend_2eproto[1];

const uint32_t TableStruct_friend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListReq, session_id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetFriendListRsp, friend_list_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveReq, peer_id_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendRemoveRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddReq, respondent_id_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddRsp, notify_event_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, notify_event_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, agree_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, apply_user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessReq, user_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendAddProcessRsp, new_session_id_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListReq, user_id_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendEvent, sender_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetPendingFriendEventListRsp, event_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, search_key_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchReq, user_id_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::FriendSearchRsp, user_info_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListReq, user_id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionListRsp, chat_session_info_list_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, chat_session_name_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateReq, member_id_list_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::ChatSessionCreateRsp, chat_session_info_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, session_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberReq, chat_session_id_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::GetChatSessionMemberRsp, member_info_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::XuChat::GetFriendListReq)},
  { 12, -1, -1, sizeof(::XuChat::GetFriendListRsp)},
  { 22, 32, -1, sizeof(::XuChat::FriendRemoveReq)},
  { 36, -1, -1, sizeof(::XuChat::FriendRemoveRsp)},
  { 45, 55, -1, sizeof(::XuChat::FriendAddReq)},
  { 59, -1, -1, sizeof(::XuChat::FriendAddRsp)},
  { 69, 81, -1, sizeof(::XuChat::FriendAddProcessReq)},
  { 87, 97, -1, sizeof(::XuChat::FriendAddProcessRsp)},
  { 101, 110, -1, sizeof(::XuChat::GetPendingFriendEventListReq)},
  { 113, 121, -1, sizeof(::XuChat::FriendEvent)},
  { 123, -1, -1, sizeof(::XuChat::GetPendingFriendEventListRsp)},
  { 133, 143, -1, sizeof(::XuChat::FriendSearchReq)},
  { 147, -1, -1, sizeof(::XuChat::FriendSearchRsp)},
  { 157, 166, -1, sizeof(::XuChat::GetChatSessionListReq)},
  { 169, -1, -1, sizeof(::XuChat::GetChatSessionListRsp)},
  { 179, 190, -1, sizeof(::XuChat::ChatSessionCreateReq)},
  { 195, 205, -1, sizeof(::XuChat::ChatSessionCreateRsp)},
  { 209, 219, -1, sizeof(::XuChat::GetChatSessionMemberReq)},
  { 223, -1, -1, sizeof(::XuChat::GetChatSessionMemberRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::XuChat::_GetFriendListReq_default_instance_._instance,
  &::XuChat::_GetFriendListRsp_default_instance_._instance,
  &::XuChat::_FriendRemoveReq_default_instance_._instance,
  &::XuChat::_FriendRemoveRsp_default_instance_._instance,
  &::XuChat::_FriendAddReq_default_instance_._instance,
  &::XuChat::_FriendAddRsp_default_instance_._instance,
  &::XuChat::_FriendAddProcessReq_default_instance_._instance,
  &::XuChat::_FriendAddProcessRsp_default_instance_._instance,
  &::XuChat::_GetPendingFriendEventListReq_default_instance_._instance,
  &::XuChat::_FriendEvent_default_instance_._instance,
  &::XuChat::_GetPendingFriendEventListRsp_default_instance_._instance,
  &::XuChat::_FriendSearchReq_default_instance_._instance,
  &::XuChat::_FriendSearchRsp_default_instance_._instance,
  &::XuChat::_GetChatSessionListReq_default_instance_._instance,
  &::XuChat::_GetChatSessionListRsp_default_instance_._instance,
  &::XuChat::_ChatSessionCreateReq_default_instance_._instance,
  &::XuChat::_ChatSessionCreateRsp_default_instance_._instance,
  &::XuChat::_GetChatSessionMemberReq_default_instance_._instance,
  &::XuChat::_GetChatSessionMemberRsp_default_instance_._instance,
};

const char descriptor_table_protodef_friend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014friend.proto\022\006XuChat\032\nbase.proto\"p\n\020Ge"
  "tFriendListReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007us"
  "er_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\tH\001\210\001"
  "\001B\n\n\010_user_idB\r\n\013_session_id\"n\n\020GetFrien"
  "dListRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030"
  "\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022%\n\013friend_list\030\004 \003"
  "(\0132\020.XuChat.UserInfo\"\200\001\n\017FriendRemoveReq"
  "\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007user_id\030\002 \001(\tH\000\210"
  "\001\001\022\027\n\nsession_id\030\003 \001(\tH\001\210\001\001\022\017\n\007peer_id\030\004"
  " \001(\tB\n\n\010_user_idB\r\n\013_session_id\"F\n\017Frien"
  "dRemoveRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007succes"
  "s\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\"\203\001\n\014FriendAddReq"
  "\022\022\n\nrequest_id\030\001 \001(\t\022\027\n\nsession_id\030\002 \001(\t"
  "H\000\210\001\001\022\024\n\007user_id\030\003 \001(\tH\001\210\001\001\022\025\n\rresponden"
  "t_id\030\004 \001(\tB\r\n\013_session_idB\n\n\010_user_id\"\\\n"
  "\014FriendAddRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007suc"
  "cess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022\027\n\017notify_eve"
  "nt_id\030\004 \001(\t\"\262\001\n\023FriendAddProcessReq\022\022\n\nr"
  "equest_id\030\001 \001(\t\022\027\n\017notify_event_id\030\002 \001(\t"
  "\022\r\n\005agree\030\003 \001(\010\022\025\n\rapply_user_id\030\004 \001(\t\022\027"
  "\n\nsession_id\030\005 \001(\tH\000\210\001\001\022\024\n\007user_id\030\006 \001(\t"
  "H\001\210\001\001B\r\n\013_session_idB\n\n\010_user_id\"z\n\023Frie"
  "ndAddProcessRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007s"
  "uccess\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022\033\n\016new_sess"
  "ion_id\030\004 \001(\tH\000\210\001\001B\021\n\017_new_session_id\"|\n\034"
  "GetPendingFriendEventListReq\022\022\n\nrequest_"
  "id\030\001 \001(\t\022\027\n\nsession_id\030\002 \001(\tH\000\210\001\001\022\024\n\007use"
  "r_id\030\003 \001(\tH\001\210\001\001B\r\n\013_session_idB\n\n\010_user_"
  "id\"S\n\013FriendEvent\022\025\n\010event_id\030\001 \001(\tH\000\210\001\001"
  "\022 \n\006sender\030\003 \001(\0132\020.XuChat.UserInfoB\013\n\t_e"
  "vent_id\"w\n\034GetPendingFriendEventListRsp\022"
  "\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006"
  "errmsg\030\003 \001(\t\022\"\n\005event\030\004 \003(\0132\023.XuChat.Fri"
  "endEvent\"\203\001\n\017FriendSearchReq\022\022\n\nrequest_"
  "id\030\001 \001(\t\022\022\n\nsearch_key\030\002 \001(\t\022\027\n\nsession_"
  "id\030\003 \001(\tH\000\210\001\001\022\024\n\007user_id\030\004 \001(\tH\001\210\001\001B\r\n\013_"
  "session_idB\n\n\010_user_id\"k\n\017FriendSearchRs"
  "p\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016"
  "\n\006errmsg\030\003 \001(\t\022#\n\tuser_info\030\004 \003(\0132\020.XuCh"
  "at.UserInfo\"u\n\025GetChatSessionListReq\022\022\n\n"
  "request_id\030\001 \001(\t\022\027\n\nsession_id\030\002 \001(\tH\000\210\001"
  "\001\022\024\n\007user_id\030\003 \001(\tH\001\210\001\001B\r\n\013_session_idB\n"
  "\n\010_user_id\"\205\001\n\025GetChatSessionListRsp\022\022\n\n"
  "request_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006err"
  "msg\030\003 \001(\t\0227\n\026chat_session_info_list\030\004 \003("
  "\0132\027.XuChat.ChatSessionInfo\"\247\001\n\024ChatSessi"
  "onCreateReq\022\022\n\nrequest_id\030\001 \001(\t\022\027\n\nsessi"
  "on_id\030\002 \001(\tH\000\210\001\001\022\024\n\007user_id\030\003 \001(\tH\001\210\001\001\022\031"
  "\n\021chat_session_name\030\004 \001(\t\022\026\n\016member_id_l"
  "ist\030\005 \003(\tB\r\n\013_session_idB\n\n\010_user_id\"\232\001\n"
  "\024ChatSessionCreateRsp\022\022\n\nrequest_id\030\001 \001("
  "\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\0227\n\021ch"
  "at_session_info\030\004 \001(\0132\027.XuChat.ChatSessi"
  "onInfoH\000\210\001\001B\024\n\022_chat_session_info\"\220\001\n\027Ge"
  "tChatSessionMemberReq\022\022\n\nrequest_id\030\001 \001("
  "\t\022\027\n\nsession_id\030\002 \001(\tH\000\210\001\001\022\024\n\007user_id\030\003 "
  "\001(\tH\001\210\001\001\022\027\n\017chat_session_id\030\004 \001(\tB\r\n\013_se"
  "ssion_idB\n\n\010_user_id\"z\n\027GetChatSessionMe"
  "mberRsp\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007success\030\002"
  " \001(\010\022\016\n\006errmsg\030\003 \001(\t\022*\n\020member_info_list"
  "\030\004 \003(\0132\020.XuChat.UserInfo2\307\005\n\rFriendServi"
  "ce\022C\n\rGetFriendList\022\030.XuChat.GetFriendLi"
  "stReq\032\030.XuChat.GetFriendListRsp\022@\n\014Frien"
  "dRemove\022\027.XuChat.FriendRemoveReq\032\027.XuCha"
  "t.FriendRemoveRsp\0227\n\tFriendAdd\022\024.XuChat."
  "FriendAddReq\032\024.XuChat.FriendAddRsp\022L\n\020Fr"
  "iendAddProcess\022\033.XuChat.FriendAddProcess"
  "Req\032\033.XuChat.FriendAddProcessRsp\022@\n\014Frie"
  "ndSearch\022\027.XuChat.FriendSearchReq\032\027.XuCh"
  "at.FriendSearchRsp\022R\n\022GetChatSessionList"
  "\022\035.XuChat.GetChatSessionListReq\032\035.XuChat"
  ".GetChatSessionListRsp\022O\n\021ChatSessionCre"
  "ate\022\034.XuChat.ChatSessionCreateReq\032\034.XuCh"
  "at.ChatSessionCreateRsp\022X\n\024GetChatSessio"
  "nMember\022\037.XuChat.GetChatSessionMemberReq"
  "\032\037.XuChat.GetChatSessionMemberRsp\022g\n\031Get"
  "PendingFriendEventList\022$.XuChat.GetPendi"
  "ngFriendEventListReq\032$.XuChat.GetPending"
  "FriendEventListRspB\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_friend_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_friend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_friend_2eproto = {
    false, false, 3151, descriptor_table_protodef_friend_2eproto,
    "friend.proto",
    &descriptor_table_friend_2eproto_once, descriptor_table_friend_2eproto_deps, 1, 19,
    schemas, file_default_instances, TableStruct_friend_2eproto::offsets,
    file_level_metadata_friend_2eproto, file_level_enum_descriptors_friend_2eproto,
    file_level_service_descriptors_friend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_friend_2eproto_getter() {
  return &descriptor_table_friend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_friend_2eproto(&descriptor_table_friend_2eproto);
namespace XuChat {

// ===================================================================

class GetFriendListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFriendListReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetFriendListReq::GetFriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetFriendListReq)
}
GetFriendListReq::GetFriendListReq(const GetFriendListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.GetFriendListReq)
}

inline void GetFriendListReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFriendListReq::~GetFriendListReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetFriendListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFriendListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
}

void GetFriendListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFriendListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetFriendListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFriendListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetFriendListReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetFriendListReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetFriendListReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFriendListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetFriendListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetFriendListReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetFriendListReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetFriendListReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetFriendListReq)
  return target;
}

size_t GetFriendListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetFriendListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFriendListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFriendListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFriendListReq::GetClassData() const { return &_class_data_; }

void GetFriendListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFriendListReq *>(to)->MergeFrom(
      static_cast<const GetFriendListReq &>(from));
}


void GetFriendListReq::MergeFrom(const GetFriendListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetFriendListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFriendListReq::CopyFrom(const GetFriendListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetFriendListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListReq::IsInitialized() const {
  return true;
}

void GetFriendListReq::InternalSwap(GetFriendListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[0]);
}

// ===================================================================

class GetFriendListRsp::_Internal {
 public:
};

void GetFriendListRsp::clear_friend_list() {
  friend_list_.Clear();
}
GetFriendListRsp::GetFriendListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friend_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetFriendListRsp)
}
GetFriendListRsp::GetFriendListRsp(const GetFriendListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friend_list_(from.friend_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetFriendListRsp)
}

inline void GetFriendListRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetFriendListRsp::~GetFriendListRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetFriendListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFriendListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetFriendListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFriendListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetFriendListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFriendListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetFriendListRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetFriendListRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.UserInfo friend_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friend_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFriendListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetFriendListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetFriendListRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetFriendListRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.UserInfo friend_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friend_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_friend_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetFriendListRsp)
  return target;
}

size_t GetFriendListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetFriendListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.UserInfo friend_list = 4;
  total_size += 1UL * this->_internal_friend_list_size();
  for (const auto& msg : this->friend_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFriendListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFriendListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFriendListRsp::GetClassData() const { return &_class_data_; }

void GetFriendListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFriendListRsp *>(to)->MergeFrom(
      static_cast<const GetFriendListRsp &>(from));
}


void GetFriendListRsp::MergeFrom(const GetFriendListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetFriendListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friend_list_.MergeFrom(from.friend_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFriendListRsp::CopyFrom(const GetFriendListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetFriendListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRsp::IsInitialized() const {
  return true;
}

void GetFriendListRsp::InternalSwap(GetFriendListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  friend_list_.InternalSwap(&other->friend_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendListRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[1]);
}

// ===================================================================

class FriendRemoveReq::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendRemoveReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FriendRemoveReq::FriendRemoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendRemoveReq)
}
FriendRemoveReq::FriendRemoveReq(const FriendRemoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  peer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_id().empty()) {
    peer_id_.Set(from._internal_peer_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendRemoveReq)
}

inline void FriendRemoveReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
peer_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendRemoveReq::~FriendRemoveReq() {
  // @@protoc_insertion_point(destructor:XuChat.FriendRemoveReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendRemoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
  peer_id_.Destroy();
}

void FriendRemoveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendRemoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendRemoveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  peer_id_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRemoveReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string peer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveReq.peer_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRemoveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendRemoveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string peer_id = 4;
  if (!this->_internal_peer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_id().data(), static_cast<int>(this->_internal_peer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveReq.peer_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_peer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendRemoveReq)
  return target;
}

size_t FriendRemoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendRemoveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // string peer_id = 4;
  if (!this->_internal_peer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRemoveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendRemoveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRemoveReq::GetClassData() const { return &_class_data_; }

void FriendRemoveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendRemoveReq *>(to)->MergeFrom(
      static_cast<const FriendRemoveReq &>(from));
}


void FriendRemoveReq::MergeFrom(const FriendRemoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendRemoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  if (!from._internal_peer_id().empty()) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRemoveReq::CopyFrom(const FriendRemoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendRemoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRemoveReq::IsInitialized() const {
  return true;
}

void FriendRemoveReq::InternalSwap(FriendRemoveReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &peer_id_, lhs_arena,
      &other->peer_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRemoveReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[2]);
}

// ===================================================================

class FriendRemoveRsp::_Internal {
 public:
};

FriendRemoveRsp::FriendRemoveRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendRemoveRsp)
}
FriendRemoveRsp::FriendRemoveRsp(const FriendRemoveRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendRemoveRsp)
}

inline void FriendRemoveRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

FriendRemoveRsp::~FriendRemoveRsp() {
  // @@protoc_insertion_point(destructor:XuChat.FriendRemoveRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendRemoveRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void FriendRemoveRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendRemoveRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendRemoveRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRemoveRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendRemoveRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRemoveRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendRemoveRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendRemoveRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendRemoveRsp)
  return target;
}

size_t FriendRemoveRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendRemoveRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRemoveRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendRemoveRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRemoveRsp::GetClassData() const { return &_class_data_; }

void FriendRemoveRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendRemoveRsp *>(to)->MergeFrom(
      static_cast<const FriendRemoveRsp &>(from));
}


void FriendRemoveRsp::MergeFrom(const FriendRemoveRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendRemoveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRemoveRsp::CopyFrom(const FriendRemoveRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendRemoveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRemoveRsp::IsInitialized() const {
  return true;
}

void FriendRemoveRsp::InternalSwap(FriendRemoveRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRemoveRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[3]);
}

// ===================================================================

class FriendAddReq::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendAddReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FriendAddReq::FriendAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendAddReq)
}
FriendAddReq::FriendAddReq(const FriendAddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  respondent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    respondent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_respondent_id().empty()) {
    respondent_id_.Set(from._internal_respondent_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendAddReq)
}

inline void FriendAddReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
respondent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  respondent_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendAddReq::~FriendAddReq() {
  // @@protoc_insertion_point(destructor:XuChat.FriendAddReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
  respondent_id_.Destroy();
}

void FriendAddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendAddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendAddReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  respondent_id_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string respondent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_respondent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddReq.respondent_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendAddReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string session_id = 2;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddReq.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string respondent_id = 4;
  if (!this->_internal_respondent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_respondent_id().data(), static_cast<int>(this->_internal_respondent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddReq.respondent_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_respondent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendAddReq)
  return target;
}

size_t FriendAddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendAddReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  // string respondent_id = 4;
  if (!this->_internal_respondent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_respondent_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendAddReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddReq::GetClassData() const { return &_class_data_; }

void FriendAddReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendAddReq *>(to)->MergeFrom(
      static_cast<const FriendAddReq &>(from));
}


void FriendAddReq::MergeFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  if (!from._internal_respondent_id().empty()) {
    _internal_set_respondent_id(from._internal_respondent_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddReq::CopyFrom(const FriendAddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddReq::IsInitialized() const {
  return true;
}

void FriendAddReq::InternalSwap(FriendAddReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &respondent_id_, lhs_arena,
      &other->respondent_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[4]);
}

// ===================================================================

class FriendAddRsp::_Internal {
 public:
};

FriendAddRsp::FriendAddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendAddRsp)
}
FriendAddRsp::FriendAddRsp(const FriendAddRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  notify_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notify_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notify_event_id().empty()) {
    notify_event_id_.Set(from._internal_notify_event_id(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendAddRsp)
}

inline void FriendAddRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notify_event_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notify_event_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

FriendAddRsp::~FriendAddRsp() {
  // @@protoc_insertion_point(destructor:XuChat.FriendAddRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
  notify_event_id_.Destroy();
}

void FriendAddRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendAddRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendAddRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  notify_event_id_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // string notify_event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notify_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddRsp.notify_event_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendAddRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // string notify_event_id = 4;
  if (!this->_internal_notify_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notify_event_id().data(), static_cast<int>(this->_internal_notify_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddRsp.notify_event_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notify_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendAddRsp)
  return target;
}

size_t FriendAddRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendAddRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // string notify_event_id = 4;
  if (!this->_internal_notify_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notify_event_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendAddRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddRsp::GetClassData() const { return &_class_data_; }

void FriendAddRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendAddRsp *>(to)->MergeFrom(
      static_cast<const FriendAddRsp &>(from));
}


void FriendAddRsp::MergeFrom(const FriendAddRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendAddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (!from._internal_notify_event_id().empty()) {
    _internal_set_notify_event_id(from._internal_notify_event_id());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddRsp::CopyFrom(const FriendAddRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendAddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddRsp::IsInitialized() const {
  return true;
}

void FriendAddRsp::InternalSwap(FriendAddRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notify_event_id_, lhs_arena,
      &other->notify_event_id_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[5]);
}

// ===================================================================

class FriendAddProcessReq::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendAddProcessReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FriendAddProcessReq::FriendAddProcessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendAddProcessReq)
}
FriendAddProcessReq::FriendAddProcessReq(const FriendAddProcessReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  notify_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notify_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notify_event_id().empty()) {
    notify_event_id_.Set(from._internal_notify_event_id(), 
      GetArenaForAllocation());
  }
  apply_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    apply_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apply_user_id().empty()) {
    apply_user_id_.Set(from._internal_apply_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendAddProcessReq)
}

inline void FriendAddProcessReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notify_event_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notify_event_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
apply_user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  apply_user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agree_ = false;
}

FriendAddProcessReq::~FriendAddProcessReq() {
  // @@protoc_insertion_point(destructor:XuChat.FriendAddProcessReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddProcessReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  notify_event_id_.Destroy();
  apply_user_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
}

void FriendAddProcessReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendAddProcessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendAddProcessReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  notify_event_id_.ClearToEmpty();
  apply_user_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  agree_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddProcessReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string notify_event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notify_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessReq.notify_event_id"));
        } else
          goto handle_unusual;
        continue;
      // bool agree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string apply_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_apply_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessReq.apply_user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddProcessReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendAddProcessReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string notify_event_id = 2;
  if (!this->_internal_notify_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notify_event_id().data(), static_cast<int>(this->_internal_notify_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessReq.notify_event_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notify_event_id(), target);
  }

  // bool agree = 3;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_agree(), target);
  }

  // string apply_user_id = 4;
  if (!this->_internal_apply_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apply_user_id().data(), static_cast<int>(this->_internal_apply_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessReq.apply_user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_apply_user_id(), target);
  }

  // optional string session_id = 5;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessReq.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // optional string user_id = 6;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessReq.user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendAddProcessReq)
  return target;
}

size_t FriendAddProcessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendAddProcessReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string notify_event_id = 2;
  if (!this->_internal_notify_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notify_event_id());
  }

  // string apply_user_id = 4;
  if (!this->_internal_apply_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apply_user_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  // bool agree = 3;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddProcessReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendAddProcessReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddProcessReq::GetClassData() const { return &_class_data_; }

void FriendAddProcessReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendAddProcessReq *>(to)->MergeFrom(
      static_cast<const FriendAddProcessReq &>(from));
}


void FriendAddProcessReq::MergeFrom(const FriendAddProcessReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendAddProcessReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_notify_event_id().empty()) {
    _internal_set_notify_event_id(from._internal_notify_event_id());
  }
  if (!from._internal_apply_user_id().empty()) {
    _internal_set_apply_user_id(from._internal_apply_user_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddProcessReq::CopyFrom(const FriendAddProcessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendAddProcessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddProcessReq::IsInitialized() const {
  return true;
}

void FriendAddProcessReq::InternalSwap(FriendAddProcessReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notify_event_id_, lhs_arena,
      &other->notify_event_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &apply_user_id_, lhs_arena,
      &other->apply_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  swap(agree_, other->agree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddProcessReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[6]);
}

// ===================================================================

class FriendAddProcessRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendAddProcessRsp>()._has_bits_);
  static void set_has_new_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FriendAddProcessRsp::FriendAddProcessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendAddProcessRsp)
}
FriendAddProcessRsp::FriendAddProcessRsp(const FriendAddProcessRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  new_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_session_id()) {
    new_session_id_.Set(from._internal_new_session_id(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendAddProcessRsp)
}

inline void FriendAddProcessRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

FriendAddProcessRsp::~FriendAddProcessRsp() {
  // @@protoc_insertion_point(destructor:XuChat.FriendAddProcessRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendAddProcessRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
  new_session_id_.Destroy();
}

void FriendAddProcessRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendAddProcessRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendAddProcessRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    new_session_id_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendAddProcessRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // optional string new_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendAddProcessRsp.new_session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendAddProcessRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendAddProcessRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // optional string new_session_id = 4;
  if (_internal_has_new_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_session_id().data(), static_cast<int>(this->_internal_new_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendAddProcessRsp.new_session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendAddProcessRsp)
  return target;
}

size_t FriendAddProcessRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendAddProcessRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // optional string new_session_id = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_session_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendAddProcessRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendAddProcessRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendAddProcessRsp::GetClassData() const { return &_class_data_; }

void FriendAddProcessRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendAddProcessRsp *>(to)->MergeFrom(
      static_cast<const FriendAddProcessRsp &>(from));
}


void FriendAddProcessRsp::MergeFrom(const FriendAddProcessRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendAddProcessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_new_session_id()) {
    _internal_set_new_session_id(from._internal_new_session_id());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendAddProcessRsp::CopyFrom(const FriendAddProcessRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendAddProcessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendAddProcessRsp::IsInitialized() const {
  return true;
}

void FriendAddProcessRsp::InternalSwap(FriendAddProcessRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &new_session_id_, lhs_arena,
      &other->new_session_id_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendAddProcessRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[7]);
}

// ===================================================================

class GetPendingFriendEventListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPendingFriendEventListReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetPendingFriendEventListReq::GetPendingFriendEventListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetPendingFriendEventListReq)
}
GetPendingFriendEventListReq::GetPendingFriendEventListReq(const GetPendingFriendEventListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.GetPendingFriendEventListReq)
}

inline void GetPendingFriendEventListReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPendingFriendEventListReq::~GetPendingFriendEventListReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetPendingFriendEventListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPendingFriendEventListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
}

void GetPendingFriendEventListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPendingFriendEventListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetPendingFriendEventListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPendingFriendEventListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetPendingFriendEventListReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetPendingFriendEventListReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetPendingFriendEventListReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPendingFriendEventListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetPendingFriendEventListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetPendingFriendEventListReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string session_id = 2;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetPendingFriendEventListReq.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetPendingFriendEventListReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetPendingFriendEventListReq)
  return target;
}

size_t GetPendingFriendEventListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetPendingFriendEventListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPendingFriendEventListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPendingFriendEventListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPendingFriendEventListReq::GetClassData() const { return &_class_data_; }

void GetPendingFriendEventListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPendingFriendEventListReq *>(to)->MergeFrom(
      static_cast<const GetPendingFriendEventListReq &>(from));
}


void GetPendingFriendEventListReq::MergeFrom(const GetPendingFriendEventListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetPendingFriendEventListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPendingFriendEventListReq::CopyFrom(const GetPendingFriendEventListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetPendingFriendEventListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingFriendEventListReq::IsInitialized() const {
  return true;
}

void GetPendingFriendEventListReq::InternalSwap(GetPendingFriendEventListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPendingFriendEventListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[8]);
}

// ===================================================================

class FriendEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendEvent>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::XuChat::UserInfo& sender(const FriendEvent* msg);
};

const ::XuChat::UserInfo&
FriendEvent::_Internal::sender(const FriendEvent* msg) {
  return *msg->sender_;
}
void FriendEvent::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
FriendEvent::FriendEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendEvent)
}
FriendEvent::FriendEvent(const FriendEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_id()) {
    event_id_.Set(from._internal_event_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::XuChat::UserInfo(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendEvent)
}

inline void FriendEvent::SharedCtor() {
event_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_ = nullptr;
}

FriendEvent::~FriendEvent() {
  // @@protoc_insertion_point(destructor:XuChat.FriendEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_id_.Destroy();
  if (this != internal_default_instance()) delete sender_;
}

void FriendEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_id_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendEvent.event_id"));
        } else
          goto handle_unusual;
        continue;
      // .XuChat.UserInfo sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string event_id = 1;
  if (_internal_has_event_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .XuChat.UserInfo sender = 3;
  if (this->_internal_has_sender()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendEvent)
  return target;
}

size_t FriendEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // .XuChat.UserInfo sender = 3;
  if (this->_internal_has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendEvent::GetClassData() const { return &_class_data_; }

void FriendEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendEvent *>(to)->MergeFrom(
      static_cast<const FriendEvent &>(from));
}


void FriendEvent::MergeFrom(const FriendEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from._internal_has_sender()) {
    _internal_mutable_sender()->::XuChat::UserInfo::MergeFrom(from._internal_sender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendEvent::CopyFrom(const FriendEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendEvent::IsInitialized() const {
  return true;
}

void FriendEvent::InternalSwap(FriendEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &event_id_, lhs_arena,
      &other->event_id_, rhs_arena
  );
  swap(sender_, other->sender_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[9]);
}

// ===================================================================

class GetPendingFriendEventListRsp::_Internal {
 public:
};

GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  event_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetPendingFriendEventListRsp)
}
GetPendingFriendEventListRsp::GetPendingFriendEventListRsp(const GetPendingFriendEventListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      event_(from.event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetPendingFriendEventListRsp)
}

inline void GetPendingFriendEventListRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetPendingFriendEventListRsp::~GetPendingFriendEventListRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetPendingFriendEventListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPendingFriendEventListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetPendingFriendEventListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPendingFriendEventListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetPendingFriendEventListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPendingFriendEventListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetPendingFriendEventListRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetPendingFriendEventListRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.FriendEvent event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPendingFriendEventListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetPendingFriendEventListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetPendingFriendEventListRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetPendingFriendEventListRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.FriendEvent event = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetPendingFriendEventListRsp)
  return target;
}

size_t GetPendingFriendEventListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetPendingFriendEventListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.FriendEvent event = 4;
  total_size += 1UL * this->_internal_event_size();
  for (const auto& msg : this->event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPendingFriendEventListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPendingFriendEventListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPendingFriendEventListRsp::GetClassData() const { return &_class_data_; }

void GetPendingFriendEventListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPendingFriendEventListRsp *>(to)->MergeFrom(
      static_cast<const GetPendingFriendEventListRsp &>(from));
}


void GetPendingFriendEventListRsp::MergeFrom(const GetPendingFriendEventListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetPendingFriendEventListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  event_.MergeFrom(from.event_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPendingFriendEventListRsp::CopyFrom(const GetPendingFriendEventListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetPendingFriendEventListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingFriendEventListRsp::IsInitialized() const {
  return true;
}

void GetPendingFriendEventListRsp::InternalSwap(GetPendingFriendEventListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  event_.InternalSwap(&other->event_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPendingFriendEventListRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[10]);
}

// ===================================================================

class FriendSearchReq::_Internal {
 public:
  using HasBits = decltype(std::declval<FriendSearchReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FriendSearchReq::FriendSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendSearchReq)
}
FriendSearchReq::FriendSearchReq(const FriendSearchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_key().empty()) {
    search_key_.Set(from._internal_search_key(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendSearchReq)
}

inline void FriendSearchReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendSearchReq::~FriendSearchReq() {
  // @@protoc_insertion_point(destructor:XuChat.FriendSearchReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendSearchReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  search_key_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
}

void FriendSearchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendSearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendSearchReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  search_key_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendSearchReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string search_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchReq.search_key"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendSearchReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendSearchReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string search_key = 2;
  if (!this->_internal_search_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchReq.search_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_key(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // optional string user_id = 4;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchReq.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendSearchReq)
  return target;
}

size_t FriendSearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendSearchReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string search_key = 2;
  if (!this->_internal_search_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_key());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendSearchReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendSearchReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendSearchReq::GetClassData() const { return &_class_data_; }

void FriendSearchReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendSearchReq *>(to)->MergeFrom(
      static_cast<const FriendSearchReq &>(from));
}


void FriendSearchReq::MergeFrom(const FriendSearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_search_key().empty()) {
    _internal_set_search_key(from._internal_search_key());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendSearchReq::CopyFrom(const FriendSearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendSearchReq::IsInitialized() const {
  return true;
}

void FriendSearchReq::InternalSwap(FriendSearchReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &search_key_, lhs_arena,
      &other->search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendSearchReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[11]);
}

// ===================================================================

class FriendSearchRsp::_Internal {
 public:
};

void FriendSearchRsp::clear_user_info() {
  user_info_.Clear();
}
FriendSearchRsp::FriendSearchRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.FriendSearchRsp)
}
FriendSearchRsp::FriendSearchRsp(const FriendSearchRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_info_(from.user_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.FriendSearchRsp)
}

inline void FriendSearchRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

FriendSearchRsp::~FriendSearchRsp() {
  // @@protoc_insertion_point(destructor:XuChat.FriendSearchRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendSearchRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void FriendSearchRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendSearchRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.FriendSearchRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_info_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendSearchRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.FriendSearchRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.UserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendSearchRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.FriendSearchRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.FriendSearchRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.UserInfo user_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.FriendSearchRsp)
  return target;
}

size_t FriendSearchRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.FriendSearchRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.UserInfo user_info = 4;
  total_size += 1UL * this->_internal_user_info_size();
  for (const auto& msg : this->user_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendSearchRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendSearchRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendSearchRsp::GetClassData() const { return &_class_data_; }

void FriendSearchRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendSearchRsp *>(to)->MergeFrom(
      static_cast<const FriendSearchRsp &>(from));
}


void FriendSearchRsp::MergeFrom(const FriendSearchRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.FriendSearchRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_info_.MergeFrom(from.user_info_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendSearchRsp::CopyFrom(const FriendSearchRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.FriendSearchRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendSearchRsp::IsInitialized() const {
  return true;
}

void FriendSearchRsp::InternalSwap(FriendSearchRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_info_.InternalSwap(&other->user_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendSearchRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[12]);
}

// ===================================================================

class GetChatSessionListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetChatSessionListReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetChatSessionListReq::GetChatSessionListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetChatSessionListReq)
}
GetChatSessionListReq::GetChatSessionListReq(const GetChatSessionListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.GetChatSessionListReq)
}

inline void GetChatSessionListReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChatSessionListReq::~GetChatSessionListReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetChatSessionListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatSessionListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
}

void GetChatSessionListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChatSessionListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetChatSessionListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatSessionListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionListReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionListReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionListReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatSessionListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetChatSessionListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionListReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string session_id = 2;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionListReq.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionListReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetChatSessionListReq)
  return target;
}

size_t GetChatSessionListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetChatSessionListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatSessionListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChatSessionListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatSessionListReq::GetClassData() const { return &_class_data_; }

void GetChatSessionListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChatSessionListReq *>(to)->MergeFrom(
      static_cast<const GetChatSessionListReq &>(from));
}


void GetChatSessionListReq::MergeFrom(const GetChatSessionListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetChatSessionListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatSessionListReq::CopyFrom(const GetChatSessionListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetChatSessionListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionListReq::IsInitialized() const {
  return true;
}

void GetChatSessionListReq::InternalSwap(GetChatSessionListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatSessionListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[13]);
}

// ===================================================================

class GetChatSessionListRsp::_Internal {
 public:
};

void GetChatSessionListRsp::clear_chat_session_info_list() {
  chat_session_info_list_.Clear();
}
GetChatSessionListRsp::GetChatSessionListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_session_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetChatSessionListRsp)
}
GetChatSessionListRsp::GetChatSessionListRsp(const GetChatSessionListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chat_session_info_list_(from.chat_session_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetChatSessionListRsp)
}

inline void GetChatSessionListRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetChatSessionListRsp::~GetChatSessionListRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetChatSessionListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatSessionListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetChatSessionListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChatSessionListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetChatSessionListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_session_info_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatSessionListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionListRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionListRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.ChatSessionInfo chat_session_info_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_session_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatSessionListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetChatSessionListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionListRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionListRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.ChatSessionInfo chat_session_info_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chat_session_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_chat_session_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetChatSessionListRsp)
  return target;
}

size_t GetChatSessionListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetChatSessionListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.ChatSessionInfo chat_session_info_list = 4;
  total_size += 1UL * this->_internal_chat_session_info_list_size();
  for (const auto& msg : this->chat_session_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatSessionListRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChatSessionListRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatSessionListRsp::GetClassData() const { return &_class_data_; }

void GetChatSessionListRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChatSessionListRsp *>(to)->MergeFrom(
      static_cast<const GetChatSessionListRsp &>(from));
}


void GetChatSessionListRsp::MergeFrom(const GetChatSessionListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetChatSessionListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_session_info_list_.MergeFrom(from.chat_session_info_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatSessionListRsp::CopyFrom(const GetChatSessionListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetChatSessionListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionListRsp::IsInitialized() const {
  return true;
}

void GetChatSessionListRsp::InternalSwap(GetChatSessionListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chat_session_info_list_.InternalSwap(&other->chat_session_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatSessionListRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[14]);
}

// ===================================================================

class ChatSessionCreateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatSessionCreateReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChatSessionCreateReq::ChatSessionCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.ChatSessionCreateReq)
}
ChatSessionCreateReq::ChatSessionCreateReq(const ChatSessionCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  chat_session_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_session_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_session_name().empty()) {
    chat_session_name_.Set(from._internal_chat_session_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.ChatSessionCreateReq)
}

inline void ChatSessionCreateReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_session_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_session_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatSessionCreateReq::~ChatSessionCreateReq() {
  // @@protoc_insertion_point(destructor:XuChat.ChatSessionCreateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatSessionCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
  chat_session_name_.Destroy();
}

void ChatSessionCreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatSessionCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.ChatSessionCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  chat_session_name_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatSessionCreateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_session_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat_session_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateReq.chat_session_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string member_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_member_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateReq.member_id_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatSessionCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.ChatSessionCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string session_id = 2;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateReq.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string chat_session_name = 4;
  if (!this->_internal_chat_session_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_session_name().data(), static_cast<int>(this->_internal_chat_session_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateReq.chat_session_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat_session_name(), target);
  }

  // repeated string member_id_list = 5;
  for (int i = 0, n = this->_internal_member_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_member_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateReq.member_id_list");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.ChatSessionCreateReq)
  return target;
}

size_t ChatSessionCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.ChatSessionCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string member_id_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(member_id_list_.size());
  for (int i = 0, n = member_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      member_id_list_.Get(i));
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  // string chat_session_name = 4;
  if (!this->_internal_chat_session_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_session_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatSessionCreateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatSessionCreateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatSessionCreateReq::GetClassData() const { return &_class_data_; }

void ChatSessionCreateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatSessionCreateReq *>(to)->MergeFrom(
      static_cast<const ChatSessionCreateReq &>(from));
}


void ChatSessionCreateReq::MergeFrom(const ChatSessionCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.ChatSessionCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  if (!from._internal_chat_session_name().empty()) {
    _internal_set_chat_session_name(from._internal_chat_session_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatSessionCreateReq::CopyFrom(const ChatSessionCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.ChatSessionCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSessionCreateReq::IsInitialized() const {
  return true;
}

void ChatSessionCreateReq::InternalSwap(ChatSessionCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_session_name_, lhs_arena,
      &other->chat_session_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatSessionCreateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[15]);
}

// ===================================================================

class ChatSessionCreateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatSessionCreateRsp>()._has_bits_);
  static const ::XuChat::ChatSessionInfo& chat_session_info(const ChatSessionCreateRsp* msg);
  static void set_has_chat_session_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XuChat::ChatSessionInfo&
ChatSessionCreateRsp::_Internal::chat_session_info(const ChatSessionCreateRsp* msg) {
  return *msg->chat_session_info_;
}
void ChatSessionCreateRsp::clear_chat_session_info() {
  if (chat_session_info_ != nullptr) chat_session_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChatSessionCreateRsp::ChatSessionCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.ChatSessionCreateRsp)
}
ChatSessionCreateRsp::ChatSessionCreateRsp(const ChatSessionCreateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chat_session_info()) {
    chat_session_info_ = new ::XuChat::ChatSessionInfo(*from.chat_session_info_);
  } else {
    chat_session_info_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.ChatSessionCreateRsp)
}

inline void ChatSessionCreateRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_session_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&chat_session_info_)) + sizeof(success_));
}

ChatSessionCreateRsp::~ChatSessionCreateRsp() {
  // @@protoc_insertion_point(destructor:XuChat.ChatSessionCreateRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatSessionCreateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
  if (this != internal_default_instance()) delete chat_session_info_;
}

void ChatSessionCreateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatSessionCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.ChatSessionCreateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_session_info_ != nullptr);
    chat_session_info_->Clear();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatSessionCreateRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.ChatSessionCreateRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // optional .XuChat.ChatSessionInfo chat_session_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_session_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatSessionCreateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.ChatSessionCreateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.ChatSessionCreateRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // optional .XuChat.ChatSessionInfo chat_session_info = 4;
  if (_internal_has_chat_session_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chat_session_info(this),
        _Internal::chat_session_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.ChatSessionCreateRsp)
  return target;
}

size_t ChatSessionCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.ChatSessionCreateRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // optional .XuChat.ChatSessionInfo chat_session_info = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_session_info_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatSessionCreateRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatSessionCreateRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatSessionCreateRsp::GetClassData() const { return &_class_data_; }

void ChatSessionCreateRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatSessionCreateRsp *>(to)->MergeFrom(
      static_cast<const ChatSessionCreateRsp &>(from));
}


void ChatSessionCreateRsp::MergeFrom(const ChatSessionCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.ChatSessionCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_chat_session_info()) {
    _internal_mutable_chat_session_info()->::XuChat::ChatSessionInfo::MergeFrom(from._internal_chat_session_info());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatSessionCreateRsp::CopyFrom(const ChatSessionCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.ChatSessionCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSessionCreateRsp::IsInitialized() const {
  return true;
}

void ChatSessionCreateRsp::InternalSwap(ChatSessionCreateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatSessionCreateRsp, success_)
      + sizeof(ChatSessionCreateRsp::success_)
      - PROTOBUF_FIELD_OFFSET(ChatSessionCreateRsp, chat_session_info_)>(
          reinterpret_cast<char*>(&chat_session_info_),
          reinterpret_cast<char*>(&other->chat_session_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatSessionCreateRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[16]);
}

// ===================================================================

class GetChatSessionMemberReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetChatSessionMemberReq>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetChatSessionMemberReq::GetChatSessionMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetChatSessionMemberReq)
}
GetChatSessionMemberReq::GetChatSessionMemberReq(const GetChatSessionMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  chat_session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_session_id().empty()) {
    chat_session_id_.Set(from._internal_chat_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.GetChatSessionMemberReq)
}

inline void GetChatSessionMemberReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChatSessionMemberReq::~GetChatSessionMemberReq() {
  // @@protoc_insertion_point(destructor:XuChat.GetChatSessionMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatSessionMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  session_id_.Destroy();
  user_id_.Destroy();
  chat_session_id_.Destroy();
}

void GetChatSessionMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChatSessionMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetChatSessionMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
  }
  chat_session_id_.ClearToEmpty();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatSessionMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string chat_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberReq.chat_session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatSessionMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetChatSessionMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string session_id = 2;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberReq.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // string chat_session_id = 4;
  if (!this->_internal_chat_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_session_id().data(), static_cast<int>(this->_internal_chat_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberReq.chat_session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetChatSessionMemberReq)
  return target;
}

size_t GetChatSessionMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetChatSessionMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

  }
  // string chat_session_id = 4;
  if (!this->_internal_chat_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatSessionMemberReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChatSessionMemberReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatSessionMemberReq::GetClassData() const { return &_class_data_; }

void GetChatSessionMemberReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChatSessionMemberReq *>(to)->MergeFrom(
      static_cast<const GetChatSessionMemberReq &>(from));
}


void GetChatSessionMemberReq::MergeFrom(const GetChatSessionMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetChatSessionMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
  }
  if (!from._internal_chat_session_id().empty()) {
    _internal_set_chat_session_id(from._internal_chat_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatSessionMemberReq::CopyFrom(const GetChatSessionMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetChatSessionMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionMemberReq::IsInitialized() const {
  return true;
}

void GetChatSessionMemberReq::InternalSwap(GetChatSessionMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_session_id_, lhs_arena,
      &other->chat_session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatSessionMemberReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[17]);
}

// ===================================================================

class GetChatSessionMemberRsp::_Internal {
 public:
};

void GetChatSessionMemberRsp::clear_member_info_list() {
  member_info_list_.Clear();
}
GetChatSessionMemberRsp::GetChatSessionMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  member_info_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.GetChatSessionMemberRsp)
}
GetChatSessionMemberRsp::GetChatSessionMemberRsp(const GetChatSessionMemberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_info_list_(from.member_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.GetChatSessionMemberRsp)
}

inline void GetChatSessionMemberRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

GetChatSessionMemberRsp::~GetChatSessionMemberRsp() {
  // @@protoc_insertion_point(destructor:XuChat.GetChatSessionMemberRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatSessionMemberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
}

void GetChatSessionMemberRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChatSessionMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.GetChatSessionMemberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_info_list_.Clear();
  request_id_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChatSessionMemberRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.GetChatSessionMemberRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .XuChat.UserInfo member_info_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatSessionMemberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.GetChatSessionMemberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.GetChatSessionMemberRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .XuChat.UserInfo member_info_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_member_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_member_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.GetChatSessionMemberRsp)
  return target;
}

size_t GetChatSessionMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.GetChatSessionMemberRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XuChat.UserInfo member_info_list = 4;
  total_size += 1UL * this->_internal_member_info_list_size();
  for (const auto& msg : this->member_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChatSessionMemberRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChatSessionMemberRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChatSessionMemberRsp::GetClassData() const { return &_class_data_; }

void GetChatSessionMemberRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChatSessionMemberRsp *>(to)->MergeFrom(
      static_cast<const GetChatSessionMemberRsp &>(from));
}


void GetChatSessionMemberRsp::MergeFrom(const GetChatSessionMemberRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.GetChatSessionMemberRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_info_list_.MergeFrom(from.member_info_list_);
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatSessionMemberRsp::CopyFrom(const GetChatSessionMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.GetChatSessionMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatSessionMemberRsp::IsInitialized() const {
  return true;
}

void GetChatSessionMemberRsp::InternalSwap(GetChatSessionMemberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_info_list_.InternalSwap(&other->member_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatSessionMemberRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_friend_2eproto_getter, &descriptor_table_friend_2eproto_once,
      file_level_metadata_friend_2eproto[18]);
}

// ===================================================================

FriendService::~FriendService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_friend_2eproto);
  return file_level_service_descriptors_friend_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendService::GetDescriptor() {
  return descriptor();
}

void FriendService::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetFriendListReq*,
                         ::XuChat::GetFriendListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendService::FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::FriendRemoveReq*,
                         ::XuChat::FriendRemoveRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendRemove() not implemented.");
  done->Run();
}

void FriendService::FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::FriendAddReq*,
                         ::XuChat::FriendAddRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendAdd() not implemented.");
  done->Run();
}

void FriendService::FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::FriendAddProcessReq*,
                         ::XuChat::FriendAddProcessRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendAddProcess() not implemented.");
  done->Run();
}

void FriendService::FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::FriendSearchReq*,
                         ::XuChat::FriendSearchRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FriendSearch() not implemented.");
  done->Run();
}

void FriendService::GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetChatSessionListReq*,
                         ::XuChat::GetChatSessionListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatSessionList() not implemented.");
  done->Run();
}

void FriendService::ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::ChatSessionCreateReq*,
                         ::XuChat::ChatSessionCreateRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ChatSessionCreate() not implemented.");
  done->Run();
}

void FriendService::GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetChatSessionMemberReq*,
                         ::XuChat::GetChatSessionMemberRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatSessionMember() not implemented.");
  done->Run();
}

void FriendService::GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::GetPendingFriendEventListReq*,
                         ::XuChat::GetPendingFriendEventListRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPendingFriendEventList() not implemented.");
  done->Run();
}

void FriendService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_friend_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetFriendListReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetFriendListRsp*>(
                 response),
             done);
      break;
    case 1:
      FriendRemove(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::FriendRemoveReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::FriendRemoveRsp*>(
                 response),
             done);
      break;
    case 2:
      FriendAdd(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::FriendAddReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::FriendAddRsp*>(
                 response),
             done);
      break;
    case 3:
      FriendAddProcess(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::FriendAddProcessReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::FriendAddProcessRsp*>(
                 response),
             done);
      break;
    case 4:
      FriendSearch(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::FriendSearchReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::FriendSearchRsp*>(
                 response),
             done);
      break;
    case 5:
      GetChatSessionList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetChatSessionListReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetChatSessionListRsp*>(
                 response),
             done);
      break;
    case 6:
      ChatSessionCreate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::ChatSessionCreateReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::ChatSessionCreateRsp*>(
                 response),
             done);
      break;
    case 7:
      GetChatSessionMember(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetChatSessionMemberReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetChatSessionMemberRsp*>(
                 response),
             done);
      break;
    case 8:
      GetPendingFriendEventList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::GetPendingFriendEventListReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::GetPendingFriendEventListRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::GetFriendListReq::default_instance();
    case 1:
      return ::XuChat::FriendRemoveReq::default_instance();
    case 2:
      return ::XuChat::FriendAddReq::default_instance();
    case 3:
      return ::XuChat::FriendAddProcessReq::default_instance();
    case 4:
      return ::XuChat::FriendSearchReq::default_instance();
    case 5:
      return ::XuChat::GetChatSessionListReq::default_instance();
    case 6:
      return ::XuChat::ChatSessionCreateReq::default_instance();
    case 7:
      return ::XuChat::GetChatSessionMemberReq::default_instance();
    case 8:
      return ::XuChat::GetPendingFriendEventListReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::GetFriendListRsp::default_instance();
    case 1:
      return ::XuChat::FriendRemoveRsp::default_instance();
    case 2:
      return ::XuChat::FriendAddRsp::default_instance();
    case 3:
      return ::XuChat::FriendAddProcessRsp::default_instance();
    case 4:
      return ::XuChat::FriendSearchRsp::default_instance();
    case 5:
      return ::XuChat::GetChatSessionListRsp::default_instance();
    case 6:
      return ::XuChat::ChatSessionCreateRsp::default_instance();
    case 7:
      return ::XuChat::GetChatSessionMemberRsp::default_instance();
    case 8:
      return ::XuChat::GetPendingFriendEventListRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendService_Stub::FriendService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendService_Stub::FriendService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendService_Stub::~FriendService_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendService_Stub::GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetFriendListReq* request,
                              ::XuChat::GetFriendListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendService_Stub::FriendRemove(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::FriendRemoveReq* request,
                              ::XuChat::FriendRemoveRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendService_Stub::FriendAdd(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::FriendAddReq* request,
                              ::XuChat::FriendAddRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendService_Stub::FriendAddProcess(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::FriendAddProcessReq* request,
                              ::XuChat::FriendAddProcessRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendService_Stub::FriendSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::FriendSearchReq* request,
                              ::XuChat::FriendSearchRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendService_Stub::GetChatSessionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetChatSessionListReq* request,
                              ::XuChat::GetChatSessionListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void FriendService_Stub::ChatSessionCreate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::ChatSessionCreateReq* request,
                              ::XuChat::ChatSessionCreateRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void FriendService_Stub::GetChatSessionMember(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetChatSessionMemberReq* request,
                              ::XuChat::GetChatSessionMemberRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void FriendService_Stub::GetPendingFriendEventList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::GetPendingFriendEventListReq* request,
                              ::XuChat::GetPendingFriendEventListRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XuChat::GetFriendListReq*
Arena::CreateMaybeMessage< ::XuChat::GetFriendListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetFriendListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetFriendListRsp*
Arena::CreateMaybeMessage< ::XuChat::GetFriendListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetFriendListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendRemoveReq*
Arena::CreateMaybeMessage< ::XuChat::FriendRemoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendRemoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendRemoveRsp*
Arena::CreateMaybeMessage< ::XuChat::FriendRemoveRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendRemoveRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendAddReq*
Arena::CreateMaybeMessage< ::XuChat::FriendAddReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendAddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendAddRsp*
Arena::CreateMaybeMessage< ::XuChat::FriendAddRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendAddRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendAddProcessReq*
Arena::CreateMaybeMessage< ::XuChat::FriendAddProcessReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendAddProcessReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendAddProcessRsp*
Arena::CreateMaybeMessage< ::XuChat::FriendAddProcessRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendAddProcessRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetPendingFriendEventListReq*
Arena::CreateMaybeMessage< ::XuChat::GetPendingFriendEventListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetPendingFriendEventListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendEvent*
Arena::CreateMaybeMessage< ::XuChat::FriendEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetPendingFriendEventListRsp*
Arena::CreateMaybeMessage< ::XuChat::GetPendingFriendEventListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetPendingFriendEventListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendSearchReq*
Arena::CreateMaybeMessage< ::XuChat::FriendSearchReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendSearchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::FriendSearchRsp*
Arena::CreateMaybeMessage< ::XuChat::FriendSearchRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::FriendSearchRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetChatSessionListReq*
Arena::CreateMaybeMessage< ::XuChat::GetChatSessionListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetChatSessionListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetChatSessionListRsp*
Arena::CreateMaybeMessage< ::XuChat::GetChatSessionListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetChatSessionListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::ChatSessionCreateReq*
Arena::CreateMaybeMessage< ::XuChat::ChatSessionCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::ChatSessionCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::ChatSessionCreateRsp*
Arena::CreateMaybeMessage< ::XuChat::ChatSessionCreateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::ChatSessionCreateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetChatSessionMemberReq*
Arena::CreateMaybeMessage< ::XuChat::GetChatSessionMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetChatSessionMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::GetChatSessionMemberRsp*
Arena::CreateMaybeMessage< ::XuChat::GetChatSessionMemberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::GetChatSessionMemberRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
