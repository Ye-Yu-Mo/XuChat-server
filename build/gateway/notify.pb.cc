// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify.proto

#include "notify.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace XuChat {
PROTOBUF_CONSTEXPR NotifyFriendAddApply::NotifyFriendAddApply(
    ::_pbi::ConstantInitialized)
  : user_info_(nullptr){}
struct NotifyFriendAddApplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendAddApplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendAddApplyDefaultTypeInternal() {}
  union {
    NotifyFriendAddApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendAddApplyDefaultTypeInternal _NotifyFriendAddApply_default_instance_;
PROTOBUF_CONSTEXPR NotifyFriendAddProcess::NotifyFriendAddProcess(
    ::_pbi::ConstantInitialized)
  : user_info_(nullptr)
  , agree_(false){}
struct NotifyFriendAddProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendAddProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendAddProcessDefaultTypeInternal() {}
  union {
    NotifyFriendAddProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendAddProcessDefaultTypeInternal _NotifyFriendAddProcess_default_instance_;
PROTOBUF_CONSTEXPR NotifyFriendRemove::NotifyFriendRemove(
    ::_pbi::ConstantInitialized)
  : user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NotifyFriendRemoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyFriendRemoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyFriendRemoveDefaultTypeInternal() {}
  union {
    NotifyFriendRemove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyFriendRemoveDefaultTypeInternal _NotifyFriendRemove_default_instance_;
PROTOBUF_CONSTEXPR NotifyNewChatSession::NotifyNewChatSession(
    ::_pbi::ConstantInitialized)
  : chat_session_info_(nullptr){}
struct NotifyNewChatSessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyNewChatSessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyNewChatSessionDefaultTypeInternal() {}
  union {
    NotifyNewChatSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyNewChatSessionDefaultTypeInternal _NotifyNewChatSession_default_instance_;
PROTOBUF_CONSTEXPR NotifyNewMessage::NotifyNewMessage(
    ::_pbi::ConstantInitialized)
  : message_info_(nullptr){}
struct NotifyNewMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyNewMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyNewMessageDefaultTypeInternal() {}
  union {
    NotifyNewMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyNewMessageDefaultTypeInternal _NotifyNewMessage_default_instance_;
PROTOBUF_CONSTEXPR NotifyMessage::NotifyMessage(
    ::_pbi::ConstantInitialized)
  : notify_event_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notify_type_(0)

  , _oneof_case_{}{}
struct NotifyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyMessageDefaultTypeInternal() {}
  union {
    NotifyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
}  // namespace XuChat
static ::_pb::Metadata file_level_metadata_notify_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_notify_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_notify_2eproto = nullptr;

const uint32_t TableStruct_notify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendAddApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendAddApply, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendAddProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendAddProcess, agree_),
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendAddProcess, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyFriendRemove, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyNewChatSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyNewChatSession, chat_session_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyNewMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyNewMessage, message_info_),
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, notify_event_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, notify_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::XuChat::NotifyMessage, notify_remarks_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XuChat::NotifyFriendAddApply)},
  { 7, -1, -1, sizeof(::XuChat::NotifyFriendAddProcess)},
  { 15, -1, -1, sizeof(::XuChat::NotifyFriendRemove)},
  { 22, -1, -1, sizeof(::XuChat::NotifyNewChatSession)},
  { 29, -1, -1, sizeof(::XuChat::NotifyNewMessage)},
  { 36, 50, -1, sizeof(::XuChat::NotifyMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::XuChat::_NotifyFriendAddApply_default_instance_._instance,
  &::XuChat::_NotifyFriendAddProcess_default_instance_._instance,
  &::XuChat::_NotifyFriendRemove_default_instance_._instance,
  &::XuChat::_NotifyNewChatSession_default_instance_._instance,
  &::XuChat::_NotifyNewMessage_default_instance_._instance,
  &::XuChat::_NotifyMessage_default_instance_._instance,
};

const char descriptor_table_protodef_notify_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014notify.proto\022\006XuChat\032\nbase.proto\";\n\024No"
  "tifyFriendAddApply\022#\n\tuser_info\030\001 \001(\0132\020."
  "XuChat.UserInfo\"L\n\026NotifyFriendAddProces"
  "s\022\r\n\005agree\030\001 \001(\010\022#\n\tuser_info\030\002 \001(\0132\020.Xu"
  "Chat.UserInfo\"%\n\022NotifyFriendRemove\022\017\n\007u"
  "ser_id\030\001 \001(\t\"J\n\024NotifyNewChatSession\0222\n\021"
  "chat_session_info\030\001 \001(\0132\027.XuChat.ChatSes"
  "sionInfo\"=\n\020NotifyNewMessage\022)\n\014message_"
  "info\030\001 \001(\0132\023.XuChat.MessageInfo\"\241\003\n\rNoti"
  "fyMessage\022\034\n\017notify_event_id\030\001 \001(\tH\001\210\001\001\022"
  "\'\n\013notify_type\030\002 \001(\0162\022.XuChat.NotifyType"
  "\0228\n\020friend_add_apply\030\003 \001(\0132\034.XuChat.Noti"
  "fyFriendAddApplyH\000\022\?\n\025friend_process_res"
  "ult\030\004 \001(\0132\036.XuChat.NotifyFriendAddProces"
  "sH\000\0223\n\rfriend_remove\030\007 \001(\0132\032.XuChat.Noti"
  "fyFriendRemoveH\000\022=\n\025new_chat_session_inf"
  "o\030\005 \001(\0132\034.XuChat.NotifyNewChatSessionH\000\022"
  "4\n\020new_message_info\030\006 \001(\0132\030.XuChat.Notif"
  "yNewMessageH\000B\020\n\016notify_remarksB\022\n\020_noti"
  "fy_event_id*\233\001\n\nNotifyType\022\033\n\027FRIEND_ADD"
  "_APPLY_NOTIFY\020\000\022\035\n\031FRIEND_ADD_PROCESS_NO"
  "TIFY\020\001\022\036\n\032CHAT_SESSION_CREATE_NOTIFY\020\002\022\027"
  "\n\023CHAT_MESSAGE_NOTIFY\020\003\022\030\n\024FRIEND_REMOVE"
  "_NOTIFY\020\004B\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_notify_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_notify_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_notify_2eproto = {
    false, false, 942, descriptor_table_protodef_notify_2eproto,
    "notify.proto",
    &descriptor_table_notify_2eproto_once, descriptor_table_notify_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_notify_2eproto::offsets,
    file_level_metadata_notify_2eproto, file_level_enum_descriptors_notify_2eproto,
    file_level_service_descriptors_notify_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_notify_2eproto_getter() {
  return &descriptor_table_notify_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_notify_2eproto(&descriptor_table_notify_2eproto);
namespace XuChat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotifyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_notify_2eproto);
  return file_level_enum_descriptors_notify_2eproto[0];
}
bool NotifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NotifyFriendAddApply::_Internal {
 public:
  static const ::XuChat::UserInfo& user_info(const NotifyFriendAddApply* msg);
};

const ::XuChat::UserInfo&
NotifyFriendAddApply::_Internal::user_info(const NotifyFriendAddApply* msg) {
  return *msg->user_info_;
}
void NotifyFriendAddApply::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
NotifyFriendAddApply::NotifyFriendAddApply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyFriendAddApply)
}
NotifyFriendAddApply::NotifyFriendAddApply(const NotifyFriendAddApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::XuChat::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyFriendAddApply)
}

inline void NotifyFriendAddApply::SharedCtor() {
user_info_ = nullptr;
}

NotifyFriendAddApply::~NotifyFriendAddApply() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyFriendAddApply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendAddApply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
}

void NotifyFriendAddApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyFriendAddApply::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyFriendAddApply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendAddApply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XuChat.UserInfo user_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendAddApply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyFriendAddApply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XuChat.UserInfo user_info = 1;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyFriendAddApply)
  return target;
}

size_t NotifyFriendAddApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyFriendAddApply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XuChat.UserInfo user_info = 1;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendAddApply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyFriendAddApply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendAddApply::GetClassData() const { return &_class_data_; }

void NotifyFriendAddApply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyFriendAddApply *>(to)->MergeFrom(
      static_cast<const NotifyFriendAddApply &>(from));
}


void NotifyFriendAddApply::MergeFrom(const NotifyFriendAddApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyFriendAddApply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::XuChat::UserInfo::MergeFrom(from._internal_user_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendAddApply::CopyFrom(const NotifyFriendAddApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyFriendAddApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddApply::IsInitialized() const {
  return true;
}

void NotifyFriendAddApply::InternalSwap(NotifyFriendAddApply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_info_, other->user_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendAddApply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[0]);
}

// ===================================================================

class NotifyFriendAddProcess::_Internal {
 public:
  static const ::XuChat::UserInfo& user_info(const NotifyFriendAddProcess* msg);
};

const ::XuChat::UserInfo&
NotifyFriendAddProcess::_Internal::user_info(const NotifyFriendAddProcess* msg) {
  return *msg->user_info_;
}
void NotifyFriendAddProcess::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
NotifyFriendAddProcess::NotifyFriendAddProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyFriendAddProcess)
}
NotifyFriendAddProcess::NotifyFriendAddProcess(const NotifyFriendAddProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::XuChat::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyFriendAddProcess)
}

inline void NotifyFriendAddProcess::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(agree_));
}

NotifyFriendAddProcess::~NotifyFriendAddProcess() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyFriendAddProcess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendAddProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
}

void NotifyFriendAddProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyFriendAddProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyFriendAddProcess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  agree_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendAddProcess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool agree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XuChat.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendAddProcess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyFriendAddProcess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_agree(), target);
  }

  // .XuChat.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyFriendAddProcess)
  return target;
}

size_t NotifyFriendAddProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyFriendAddProcess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XuChat.UserInfo user_info = 2;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendAddProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyFriendAddProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendAddProcess::GetClassData() const { return &_class_data_; }

void NotifyFriendAddProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyFriendAddProcess *>(to)->MergeFrom(
      static_cast<const NotifyFriendAddProcess &>(from));
}


void NotifyFriendAddProcess::MergeFrom(const NotifyFriendAddProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyFriendAddProcess)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::XuChat::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendAddProcess::CopyFrom(const NotifyFriendAddProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyFriendAddProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendAddProcess::IsInitialized() const {
  return true;
}

void NotifyFriendAddProcess::InternalSwap(NotifyFriendAddProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyFriendAddProcess, agree_)
      + sizeof(NotifyFriendAddProcess::agree_)
      - PROTOBUF_FIELD_OFFSET(NotifyFriendAddProcess, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendAddProcess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[1]);
}

// ===================================================================

class NotifyFriendRemove::_Internal {
 public:
};

NotifyFriendRemove::NotifyFriendRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyFriendRemove)
}
NotifyFriendRemove::NotifyFriendRemove(const NotifyFriendRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyFriendRemove)
}

inline void NotifyFriendRemove::SharedCtor() {
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotifyFriendRemove::~NotifyFriendRemove() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyFriendRemove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyFriendRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.Destroy();
}

void NotifyFriendRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyFriendRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyFriendRemove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyFriendRemove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.NotifyFriendRemove.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyFriendRemove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyFriendRemove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.NotifyFriendRemove.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyFriendRemove)
  return target;
}

size_t NotifyFriendRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyFriendRemove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyFriendRemove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyFriendRemove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyFriendRemove::GetClassData() const { return &_class_data_; }

void NotifyFriendRemove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyFriendRemove *>(to)->MergeFrom(
      static_cast<const NotifyFriendRemove &>(from));
}


void NotifyFriendRemove::MergeFrom(const NotifyFriendRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyFriendRemove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyFriendRemove::CopyFrom(const NotifyFriendRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyFriendRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyFriendRemove::IsInitialized() const {
  return true;
}

void NotifyFriendRemove::InternalSwap(NotifyFriendRemove* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyFriendRemove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[2]);
}

// ===================================================================

class NotifyNewChatSession::_Internal {
 public:
  static const ::XuChat::ChatSessionInfo& chat_session_info(const NotifyNewChatSession* msg);
};

const ::XuChat::ChatSessionInfo&
NotifyNewChatSession::_Internal::chat_session_info(const NotifyNewChatSession* msg) {
  return *msg->chat_session_info_;
}
void NotifyNewChatSession::clear_chat_session_info() {
  if (GetArenaForAllocation() == nullptr && chat_session_info_ != nullptr) {
    delete chat_session_info_;
  }
  chat_session_info_ = nullptr;
}
NotifyNewChatSession::NotifyNewChatSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyNewChatSession)
}
NotifyNewChatSession::NotifyNewChatSession(const NotifyNewChatSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_session_info()) {
    chat_session_info_ = new ::XuChat::ChatSessionInfo(*from.chat_session_info_);
  } else {
    chat_session_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyNewChatSession)
}

inline void NotifyNewChatSession::SharedCtor() {
chat_session_info_ = nullptr;
}

NotifyNewChatSession::~NotifyNewChatSession() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyNewChatSession)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyNewChatSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_session_info_;
}

void NotifyNewChatSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyNewChatSession::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyNewChatSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && chat_session_info_ != nullptr) {
    delete chat_session_info_;
  }
  chat_session_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyNewChatSession::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XuChat.ChatSessionInfo chat_session_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_session_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyNewChatSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyNewChatSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XuChat.ChatSessionInfo chat_session_info = 1;
  if (this->_internal_has_chat_session_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chat_session_info(this),
        _Internal::chat_session_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyNewChatSession)
  return target;
}

size_t NotifyNewChatSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyNewChatSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XuChat.ChatSessionInfo chat_session_info = 1;
  if (this->_internal_has_chat_session_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_session_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyNewChatSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyNewChatSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyNewChatSession::GetClassData() const { return &_class_data_; }

void NotifyNewChatSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyNewChatSession *>(to)->MergeFrom(
      static_cast<const NotifyNewChatSession &>(from));
}


void NotifyNewChatSession::MergeFrom(const NotifyNewChatSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyNewChatSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_session_info()) {
    _internal_mutable_chat_session_info()->::XuChat::ChatSessionInfo::MergeFrom(from._internal_chat_session_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyNewChatSession::CopyFrom(const NotifyNewChatSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyNewChatSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewChatSession::IsInitialized() const {
  return true;
}

void NotifyNewChatSession::InternalSwap(NotifyNewChatSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(chat_session_info_, other->chat_session_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyNewChatSession::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[3]);
}

// ===================================================================

class NotifyNewMessage::_Internal {
 public:
  static const ::XuChat::MessageInfo& message_info(const NotifyNewMessage* msg);
};

const ::XuChat::MessageInfo&
NotifyNewMessage::_Internal::message_info(const NotifyNewMessage* msg) {
  return *msg->message_info_;
}
void NotifyNewMessage::clear_message_info() {
  if (GetArenaForAllocation() == nullptr && message_info_ != nullptr) {
    delete message_info_;
  }
  message_info_ = nullptr;
}
NotifyNewMessage::NotifyNewMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyNewMessage)
}
NotifyNewMessage::NotifyNewMessage(const NotifyNewMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_info()) {
    message_info_ = new ::XuChat::MessageInfo(*from.message_info_);
  } else {
    message_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyNewMessage)
}

inline void NotifyNewMessage::SharedCtor() {
message_info_ = nullptr;
}

NotifyNewMessage::~NotifyNewMessage() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyNewMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyNewMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_info_;
}

void NotifyNewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyNewMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && message_info_ != nullptr) {
    delete message_info_;
  }
  message_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyNewMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XuChat.MessageInfo message_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyNewMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyNewMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XuChat.MessageInfo message_info = 1;
  if (this->_internal_has_message_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message_info(this),
        _Internal::message_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyNewMessage)
  return target;
}

size_t NotifyNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyNewMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XuChat.MessageInfo message_info = 1;
  if (this->_internal_has_message_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyNewMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyNewMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyNewMessage::GetClassData() const { return &_class_data_; }

void NotifyNewMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyNewMessage *>(to)->MergeFrom(
      static_cast<const NotifyNewMessage &>(from));
}


void NotifyNewMessage::MergeFrom(const NotifyNewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyNewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_info()) {
    _internal_mutable_message_info()->::XuChat::MessageInfo::MergeFrom(from._internal_message_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyNewMessage::CopyFrom(const NotifyNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewMessage::IsInitialized() const {
  return true;
}

void NotifyNewMessage::InternalSwap(NotifyNewMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_info_, other->message_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyNewMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[4]);
}

// ===================================================================

class NotifyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NotifyMessage>()._has_bits_);
  static void set_has_notify_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::XuChat::NotifyFriendAddApply& friend_add_apply(const NotifyMessage* msg);
  static const ::XuChat::NotifyFriendAddProcess& friend_process_result(const NotifyMessage* msg);
  static const ::XuChat::NotifyFriendRemove& friend_remove(const NotifyMessage* msg);
  static const ::XuChat::NotifyNewChatSession& new_chat_session_info(const NotifyMessage* msg);
  static const ::XuChat::NotifyNewMessage& new_message_info(const NotifyMessage* msg);
};

const ::XuChat::NotifyFriendAddApply&
NotifyMessage::_Internal::friend_add_apply(const NotifyMessage* msg) {
  return *msg->notify_remarks_.friend_add_apply_;
}
const ::XuChat::NotifyFriendAddProcess&
NotifyMessage::_Internal::friend_process_result(const NotifyMessage* msg) {
  return *msg->notify_remarks_.friend_process_result_;
}
const ::XuChat::NotifyFriendRemove&
NotifyMessage::_Internal::friend_remove(const NotifyMessage* msg) {
  return *msg->notify_remarks_.friend_remove_;
}
const ::XuChat::NotifyNewChatSession&
NotifyMessage::_Internal::new_chat_session_info(const NotifyMessage* msg) {
  return *msg->notify_remarks_.new_chat_session_info_;
}
const ::XuChat::NotifyNewMessage&
NotifyMessage::_Internal::new_message_info(const NotifyMessage* msg) {
  return *msg->notify_remarks_.new_message_info_;
}
void NotifyMessage::set_allocated_friend_add_apply(::XuChat::NotifyFriendAddApply* friend_add_apply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_add_apply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_add_apply);
    if (message_arena != submessage_arena) {
      friend_add_apply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_add_apply, submessage_arena);
    }
    set_has_friend_add_apply();
    notify_remarks_.friend_add_apply_ = friend_add_apply;
  }
  // @@protoc_insertion_point(field_set_allocated:XuChat.NotifyMessage.friend_add_apply)
}
void NotifyMessage::set_allocated_friend_process_result(::XuChat::NotifyFriendAddProcess* friend_process_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_process_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_process_result);
    if (message_arena != submessage_arena) {
      friend_process_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_process_result, submessage_arena);
    }
    set_has_friend_process_result();
    notify_remarks_.friend_process_result_ = friend_process_result;
  }
  // @@protoc_insertion_point(field_set_allocated:XuChat.NotifyMessage.friend_process_result)
}
void NotifyMessage::set_allocated_friend_remove(::XuChat::NotifyFriendRemove* friend_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (friend_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friend_remove);
    if (message_arena != submessage_arena) {
      friend_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_remove, submessage_arena);
    }
    set_has_friend_remove();
    notify_remarks_.friend_remove_ = friend_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:XuChat.NotifyMessage.friend_remove)
}
void NotifyMessage::set_allocated_new_chat_session_info(::XuChat::NotifyNewChatSession* new_chat_session_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (new_chat_session_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_chat_session_info);
    if (message_arena != submessage_arena) {
      new_chat_session_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_chat_session_info, submessage_arena);
    }
    set_has_new_chat_session_info();
    notify_remarks_.new_chat_session_info_ = new_chat_session_info;
  }
  // @@protoc_insertion_point(field_set_allocated:XuChat.NotifyMessage.new_chat_session_info)
}
void NotifyMessage::set_allocated_new_message_info(::XuChat::NotifyNewMessage* new_message_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notify_remarks();
  if (new_message_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_message_info);
    if (message_arena != submessage_arena) {
      new_message_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_message_info, submessage_arena);
    }
    set_has_new_message_info();
    notify_remarks_.new_message_info_ = new_message_info;
  }
  // @@protoc_insertion_point(field_set_allocated:XuChat.NotifyMessage.new_message_info)
}
NotifyMessage::NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.NotifyMessage)
}
NotifyMessage::NotifyMessage(const NotifyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notify_event_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notify_event_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notify_event_id()) {
    notify_event_id_.Set(from._internal_notify_event_id(), 
      GetArenaForAllocation());
  }
  notify_type_ = from.notify_type_;
  clear_has_notify_remarks();
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      _internal_mutable_friend_add_apply()->::XuChat::NotifyFriendAddApply::MergeFrom(from._internal_friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      _internal_mutable_friend_process_result()->::XuChat::NotifyFriendAddProcess::MergeFrom(from._internal_friend_process_result());
      break;
    }
    case kFriendRemove: {
      _internal_mutable_friend_remove()->::XuChat::NotifyFriendRemove::MergeFrom(from._internal_friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      _internal_mutable_new_chat_session_info()->::XuChat::NotifyNewChatSession::MergeFrom(from._internal_new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      _internal_mutable_new_message_info()->::XuChat::NotifyNewMessage::MergeFrom(from._internal_new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.NotifyMessage)
}

inline void NotifyMessage::SharedCtor() {
notify_event_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notify_event_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notify_type_ = 0;
clear_has_notify_remarks();
}

NotifyMessage::~NotifyMessage() {
  // @@protoc_insertion_point(destructor:XuChat.NotifyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notify_event_id_.Destroy();
  if (has_notify_remarks()) {
    clear_notify_remarks();
  }
}

void NotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyMessage::clear_notify_remarks() {
// @@protoc_insertion_point(one_of_clear_start:XuChat.NotifyMessage)
  switch (notify_remarks_case()) {
    case kFriendAddApply: {
      if (GetArenaForAllocation() == nullptr) {
        delete notify_remarks_.friend_add_apply_;
      }
      break;
    }
    case kFriendProcessResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete notify_remarks_.friend_process_result_;
      }
      break;
    }
    case kFriendRemove: {
      if (GetArenaForAllocation() == nullptr) {
        delete notify_remarks_.friend_remove_;
      }
      break;
    }
    case kNewChatSessionInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete notify_remarks_.new_chat_session_info_;
      }
      break;
    }
    case kNewMessageInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete notify_remarks_.new_message_info_;
      }
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NOTIFY_REMARKS_NOT_SET;
}


void NotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.NotifyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notify_event_id_.ClearNonDefaultToEmpty();
  }
  notify_type_ = 0;
  clear_notify_remarks();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string notify_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_notify_event_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.NotifyMessage.notify_event_id"));
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyType notify_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notify_type(static_cast<::XuChat::NotifyType>(val));
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyFriendAddApply friend_add_apply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_add_apply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyFriendAddProcess friend_process_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_process_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyNewChatSession new_chat_session_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_chat_session_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyNewMessage new_message_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_message_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XuChat.NotifyFriendRemove friend_remove = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_remove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.NotifyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string notify_event_id = 1;
  if (_internal_has_notify_event_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notify_event_id().data(), static_cast<int>(this->_internal_notify_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.NotifyMessage.notify_event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notify_event_id(), target);
  }

  // .XuChat.NotifyType notify_type = 2;
  if (this->_internal_notify_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_notify_type(), target);
  }

  // .XuChat.NotifyFriendAddApply friend_add_apply = 3;
  if (_internal_has_friend_add_apply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::friend_add_apply(this),
        _Internal::friend_add_apply(this).GetCachedSize(), target, stream);
  }

  // .XuChat.NotifyFriendAddProcess friend_process_result = 4;
  if (_internal_has_friend_process_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::friend_process_result(this),
        _Internal::friend_process_result(this).GetCachedSize(), target, stream);
  }

  // .XuChat.NotifyNewChatSession new_chat_session_info = 5;
  if (_internal_has_new_chat_session_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_chat_session_info(this),
        _Internal::new_chat_session_info(this).GetCachedSize(), target, stream);
  }

  // .XuChat.NotifyNewMessage new_message_info = 6;
  if (_internal_has_new_message_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::new_message_info(this),
        _Internal::new_message_info(this).GetCachedSize(), target, stream);
  }

  // .XuChat.NotifyFriendRemove friend_remove = 7;
  if (_internal_has_friend_remove()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::friend_remove(this),
        _Internal::friend_remove(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.NotifyMessage)
  return target;
}

size_t NotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.NotifyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string notify_event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notify_event_id());
  }

  // .XuChat.NotifyType notify_type = 2;
  if (this->_internal_notify_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notify_type());
  }

  switch (notify_remarks_case()) {
    // .XuChat.NotifyFriendAddApply friend_add_apply = 3;
    case kFriendAddApply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_add_apply_);
      break;
    }
    // .XuChat.NotifyFriendAddProcess friend_process_result = 4;
    case kFriendProcessResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_process_result_);
      break;
    }
    // .XuChat.NotifyFriendRemove friend_remove = 7;
    case kFriendRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notify_remarks_.friend_remove_);
      break;
    }
    // .XuChat.NotifyNewChatSession new_chat_session_info = 5;
    case kNewChatSessionInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notify_remarks_.new_chat_session_info_);
      break;
    }
    // .XuChat.NotifyNewMessage new_message_info = 6;
    case kNewMessageInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notify_remarks_.new_message_info_);
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyMessage::GetClassData() const { return &_class_data_; }

void NotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyMessage *>(to)->MergeFrom(
      static_cast<const NotifyMessage &>(from));
}


void NotifyMessage::MergeFrom(const NotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notify_event_id()) {
    _internal_set_notify_event_id(from._internal_notify_event_id());
  }
  if (from._internal_notify_type() != 0) {
    _internal_set_notify_type(from._internal_notify_type());
  }
  switch (from.notify_remarks_case()) {
    case kFriendAddApply: {
      _internal_mutable_friend_add_apply()->::XuChat::NotifyFriendAddApply::MergeFrom(from._internal_friend_add_apply());
      break;
    }
    case kFriendProcessResult: {
      _internal_mutable_friend_process_result()->::XuChat::NotifyFriendAddProcess::MergeFrom(from._internal_friend_process_result());
      break;
    }
    case kFriendRemove: {
      _internal_mutable_friend_remove()->::XuChat::NotifyFriendRemove::MergeFrom(from._internal_friend_remove());
      break;
    }
    case kNewChatSessionInfo: {
      _internal_mutable_new_chat_session_info()->::XuChat::NotifyNewChatSession::MergeFrom(from._internal_new_chat_session_info());
      break;
    }
    case kNewMessageInfo: {
      _internal_mutable_new_message_info()->::XuChat::NotifyNewMessage::MergeFrom(from._internal_new_message_info());
      break;
    }
    case NOTIFY_REMARKS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyMessage::CopyFrom(const NotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMessage::IsInitialized() const {
  return true;
}

void NotifyMessage::InternalSwap(NotifyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notify_event_id_, lhs_arena,
      &other->notify_event_id_, rhs_arena
  );
  swap(notify_type_, other->notify_type_);
  swap(notify_remarks_, other->notify_remarks_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_notify_2eproto_getter, &descriptor_table_notify_2eproto_once,
      file_level_metadata_notify_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XuChat::NotifyFriendAddApply*
Arena::CreateMaybeMessage< ::XuChat::NotifyFriendAddApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyFriendAddApply >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::NotifyFriendAddProcess*
Arena::CreateMaybeMessage< ::XuChat::NotifyFriendAddProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyFriendAddProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::NotifyFriendRemove*
Arena::CreateMaybeMessage< ::XuChat::NotifyFriendRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyFriendRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::NotifyNewChatSession*
Arena::CreateMaybeMessage< ::XuChat::NotifyNewChatSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyNewChatSession >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::NotifyNewMessage*
Arena::CreateMaybeMessage< ::XuChat::NotifyNewMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyNewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::NotifyMessage*
Arena::CreateMaybeMessage< ::XuChat::NotifyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::NotifyMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
