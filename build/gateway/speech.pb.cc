// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#include "speech.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace XuChat {
PROTOBUF_CONSTEXPR SpeechRecognitionReq::SpeechRecognitionReq(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , speech_content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SpeechRecognitionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeechRecognitionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeechRecognitionReqDefaultTypeInternal() {}
  union {
    SpeechRecognitionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeechRecognitionReqDefaultTypeInternal _SpeechRecognitionReq_default_instance_;
PROTOBUF_CONSTEXPR SpeechRecognitionRsp::SpeechRecognitionRsp(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , errmsg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , recognition_result_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , success_(false){}
struct SpeechRecognitionRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeechRecognitionRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeechRecognitionRspDefaultTypeInternal() {}
  union {
    SpeechRecognitionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeechRecognitionRspDefaultTypeInternal _SpeechRecognitionRsp_default_instance_;
}  // namespace XuChat
static ::_pb::Metadata file_level_metadata_speech_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_speech_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_speech_2eproto[1];

const uint32_t TableStruct_speech_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, speech_content_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionReq, session_id_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, request_id_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, success_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, errmsg_),
  PROTOBUF_FIELD_OFFSET(::XuChat::SpeechRecognitionRsp, recognition_result_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::XuChat::SpeechRecognitionReq)},
  { 14, 24, -1, sizeof(::XuChat::SpeechRecognitionRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::XuChat::_SpeechRecognitionReq_default_instance_._instance,
  &::XuChat::_SpeechRecognitionRsp_default_instance_._instance,
};

const char descriptor_table_protodef_speech_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014speech.proto\022\006XuChat\"\214\001\n\024SpeechRecogni"
  "tionReq\022\022\n\nrequest_id\030\001 \001(\t\022\026\n\016speech_co"
  "ntent\030\002 \001(\014\022\024\n\007user_id\030\003 \001(\tH\000\210\001\001\022\027\n\nses"
  "sion_id\030\004 \001(\tH\001\210\001\001B\n\n\010_user_idB\r\n\013_sessi"
  "on_id\"\223\001\n\024SpeechRecognitionRsp\022\022\n\nreques"
  "t_id\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\023\n\006errmsg\030\003 "
  "\001(\tH\000\210\001\001\022\037\n\022recognition_result\030\004 \001(\tH\001\210\001"
  "\001B\t\n\007_errmsgB\025\n\023_recognition_result2`\n\rS"
  "peechService\022O\n\021SpeechRecognition\022\034.XuCh"
  "at.SpeechRecognitionReq\032\034.XuChat.SpeechR"
  "ecognitionRspB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_speech_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_speech_2eproto = {
    false, false, 426, descriptor_table_protodef_speech_2eproto,
    "speech.proto",
    &descriptor_table_speech_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_speech_2eproto::offsets,
    file_level_metadata_speech_2eproto, file_level_enum_descriptors_speech_2eproto,
    file_level_service_descriptors_speech_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_speech_2eproto_getter() {
  return &descriptor_table_speech_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_speech_2eproto(&descriptor_table_speech_2eproto);
namespace XuChat {

// ===================================================================

class SpeechRecognitionReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeechRecognitionReq>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeechRecognitionReq::SpeechRecognitionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.SpeechRecognitionReq)
}
SpeechRecognitionReq::SpeechRecognitionReq(const SpeechRecognitionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  speech_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    speech_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_speech_content().empty()) {
    speech_content_.Set(from._internal_speech_content(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XuChat.SpeechRecognitionReq)
}

inline void SpeechRecognitionReq::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
speech_content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  speech_content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpeechRecognitionReq::~SpeechRecognitionReq() {
  // @@protoc_insertion_point(destructor:XuChat.SpeechRecognitionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeechRecognitionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  speech_content_.Destroy();
  user_id_.Destroy();
  session_id_.Destroy();
}

void SpeechRecognitionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.SpeechRecognitionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  speech_content_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes speech_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_speech_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.SpeechRecognitionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bytes speech_content = 2;
  if (!this->_internal_speech_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_speech_content(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional string session_id = 4;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionReq.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.SpeechRecognitionReq)
  return target;
}

size_t SpeechRecognitionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.SpeechRecognitionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bytes speech_content = 2;
  if (!this->_internal_speech_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_speech_content());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechRecognitionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechRecognitionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechRecognitionReq::GetClassData() const { return &_class_data_; }

void SpeechRecognitionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechRecognitionReq *>(to)->MergeFrom(
      static_cast<const SpeechRecognitionReq &>(from));
}


void SpeechRecognitionReq::MergeFrom(const SpeechRecognitionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.SpeechRecognitionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_speech_content().empty()) {
    _internal_set_speech_content(from._internal_speech_content());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_session_id(from._internal_session_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechRecognitionReq::CopyFrom(const SpeechRecognitionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.SpeechRecognitionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionReq::IsInitialized() const {
  return true;
}

void SpeechRecognitionReq::InternalSwap(SpeechRecognitionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &speech_content_, lhs_arena,
      &other->speech_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speech_2eproto_getter, &descriptor_table_speech_2eproto_once,
      file_level_metadata_speech_2eproto[0]);
}

// ===================================================================

class SpeechRecognitionRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeechRecognitionRsp>()._has_bits_);
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recognition_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeechRecognitionRsp::SpeechRecognitionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XuChat.SpeechRecognitionRsp)
}
SpeechRecognitionRsp::SpeechRecognitionRsp(const SpeechRecognitionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errmsg()) {
    errmsg_.Set(from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  recognition_result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recognition_result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_recognition_result()) {
    recognition_result_.Set(from._internal_recognition_result(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:XuChat.SpeechRecognitionRsp)
}

inline void SpeechRecognitionRsp::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errmsg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recognition_result_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recognition_result_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

SpeechRecognitionRsp::~SpeechRecognitionRsp() {
  // @@protoc_insertion_point(destructor:XuChat.SpeechRecognitionRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeechRecognitionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  errmsg_.Destroy();
  recognition_result_.Destroy();
}

void SpeechRecognitionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XuChat.SpeechRecognitionRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      errmsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      recognition_result_.ClearNonDefaultToEmpty();
    }
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // optional string recognition_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_recognition_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "XuChat.SpeechRecognitionRsp.recognition_result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XuChat.SpeechRecognitionRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // optional string errmsg = 3;
  if (_internal_has_errmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // optional string recognition_result = 4;
  if (_internal_has_recognition_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recognition_result().data(), static_cast<int>(this->_internal_recognition_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XuChat.SpeechRecognitionRsp.recognition_result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_recognition_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XuChat.SpeechRecognitionRsp)
  return target;
}

size_t SpeechRecognitionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XuChat.SpeechRecognitionRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string errmsg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errmsg());
    }

    // optional string recognition_result = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recognition_result());
    }

  }
  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechRecognitionRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechRecognitionRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechRecognitionRsp::GetClassData() const { return &_class_data_; }

void SpeechRecognitionRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechRecognitionRsp *>(to)->MergeFrom(
      static_cast<const SpeechRecognitionRsp &>(from));
}


void SpeechRecognitionRsp::MergeFrom(const SpeechRecognitionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XuChat.SpeechRecognitionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errmsg(from._internal_errmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_recognition_result(from._internal_recognition_result());
    }
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechRecognitionRsp::CopyFrom(const SpeechRecognitionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XuChat.SpeechRecognitionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionRsp::IsInitialized() const {
  return true;
}

void SpeechRecognitionRsp::InternalSwap(SpeechRecognitionRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &recognition_result_, lhs_arena,
      &other->recognition_result_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_speech_2eproto_getter, &descriptor_table_speech_2eproto_once,
      file_level_metadata_speech_2eproto[1]);
}

// ===================================================================

SpeechService::~SpeechService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SpeechService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_speech_2eproto);
  return file_level_service_descriptors_speech_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SpeechService::GetDescriptor() {
  return descriptor();
}

void SpeechService::SpeechRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::XuChat::SpeechRecognitionReq*,
                         ::XuChat::SpeechRecognitionRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SpeechRecognition() not implemented.");
  done->Run();
}

void SpeechService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_speech_2eproto[0]);
  switch(method->index()) {
    case 0:
      SpeechRecognition(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::XuChat::SpeechRecognitionReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::XuChat::SpeechRecognitionRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SpeechService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::SpeechRecognitionReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SpeechService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::XuChat::SpeechRecognitionRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SpeechService_Stub::SpeechService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SpeechService_Stub::SpeechService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SpeechService_Stub::~SpeechService_Stub() {
  if (owns_channel_) delete channel_;
}

void SpeechService_Stub::SpeechRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::XuChat::SpeechRecognitionReq* request,
                              ::XuChat::SpeechRecognitionRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XuChat::SpeechRecognitionReq*
Arena::CreateMaybeMessage< ::XuChat::SpeechRecognitionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::SpeechRecognitionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XuChat::SpeechRecognitionRsp*
Arena::CreateMaybeMessage< ::XuChat::SpeechRecognitionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XuChat::SpeechRecognitionRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
