// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace XuChat {
class GetHistoryMsgReq;
struct GetHistoryMsgReqDefaultTypeInternal;
extern GetHistoryMsgReqDefaultTypeInternal _GetHistoryMsgReq_default_instance_;
class GetHistoryMsgRsp;
struct GetHistoryMsgRspDefaultTypeInternal;
extern GetHistoryMsgRspDefaultTypeInternal _GetHistoryMsgRsp_default_instance_;
class GetRecentMsgReq;
struct GetRecentMsgReqDefaultTypeInternal;
extern GetRecentMsgReqDefaultTypeInternal _GetRecentMsgReq_default_instance_;
class GetRecentMsgRsp;
struct GetRecentMsgRspDefaultTypeInternal;
extern GetRecentMsgRspDefaultTypeInternal _GetRecentMsgRsp_default_instance_;
class MsgSearchReq;
struct MsgSearchReqDefaultTypeInternal;
extern MsgSearchReqDefaultTypeInternal _MsgSearchReq_default_instance_;
class MsgSearchRsp;
struct MsgSearchRspDefaultTypeInternal;
extern MsgSearchRspDefaultTypeInternal _MsgSearchRsp_default_instance_;
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> ::XuChat::GetHistoryMsgReq* Arena::CreateMaybeMessage<::XuChat::GetHistoryMsgReq>(Arena*);
template<> ::XuChat::GetHistoryMsgRsp* Arena::CreateMaybeMessage<::XuChat::GetHistoryMsgRsp>(Arena*);
template<> ::XuChat::GetRecentMsgReq* Arena::CreateMaybeMessage<::XuChat::GetRecentMsgReq>(Arena*);
template<> ::XuChat::GetRecentMsgRsp* Arena::CreateMaybeMessage<::XuChat::GetRecentMsgRsp>(Arena*);
template<> ::XuChat::MsgSearchReq* Arena::CreateMaybeMessage<::XuChat::MsgSearchReq>(Arena*);
template<> ::XuChat::MsgSearchRsp* Arena::CreateMaybeMessage<::XuChat::MsgSearchRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XuChat {

// ===================================================================

class GetHistoryMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetHistoryMsgReq) */ {
 public:
  inline GetHistoryMsgReq() : GetHistoryMsgReq(nullptr) {}
  ~GetHistoryMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GetHistoryMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHistoryMsgReq(const GetHistoryMsgReq& from);
  GetHistoryMsgReq(GetHistoryMsgReq&& from) noexcept
    : GetHistoryMsgReq() {
    *this = ::std::move(from);
  }

  inline GetHistoryMsgReq& operator=(const GetHistoryMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHistoryMsgReq& operator=(GetHistoryMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHistoryMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHistoryMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetHistoryMsgReq*>(
               &_GetHistoryMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetHistoryMsgReq& a, GetHistoryMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHistoryMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHistoryMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHistoryMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHistoryMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHistoryMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetHistoryMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHistoryMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetHistoryMsgReq";
  }
  protected:
  explicit GetHistoryMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kChatSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 5,
    kSessionIdFieldNumber = 6,
    kStartTimeFieldNumber = 3,
    kOverTimeFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string chat_session_id = 2;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_id();
  PROTOBUF_NODISCARD std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // optional string user_id = 5;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 6;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // int64 start_time = 3;
  void clear_start_time();
  int64_t start_time() const;
  void set_start_time(int64_t value);
  private:
  int64_t _internal_start_time() const;
  void _internal_set_start_time(int64_t value);
  public:

  // int64 over_time = 4;
  void clear_over_time();
  int64_t over_time() const;
  void set_over_time(int64_t value);
  private:
  int64_t _internal_over_time() const;
  void _internal_set_over_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetHistoryMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  int64_t start_time_;
  int64_t over_time_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetHistoryMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetHistoryMsgRsp) */ {
 public:
  inline GetHistoryMsgRsp() : GetHistoryMsgRsp(nullptr) {}
  ~GetHistoryMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR GetHistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHistoryMsgRsp(const GetHistoryMsgRsp& from);
  GetHistoryMsgRsp(GetHistoryMsgRsp&& from) noexcept
    : GetHistoryMsgRsp() {
    *this = ::std::move(from);
  }

  inline GetHistoryMsgRsp& operator=(const GetHistoryMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHistoryMsgRsp& operator=(GetHistoryMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHistoryMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHistoryMsgRsp* internal_default_instance() {
    return reinterpret_cast<const GetHistoryMsgRsp*>(
               &_GetHistoryMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetHistoryMsgRsp& a, GetHistoryMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHistoryMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHistoryMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHistoryMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHistoryMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHistoryMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetHistoryMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHistoryMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetHistoryMsgRsp";
  }
  protected:
  explicit GetHistoryMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .XuChat.MessageInfo msg_list = 4;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::XuChat::MessageInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
      mutable_msg_list();
  private:
  const ::XuChat::MessageInfo& _internal_msg_list(int index) const;
  ::XuChat::MessageInfo* _internal_add_msg_list();
  public:
  const ::XuChat::MessageInfo& msg_list(int index) const;
  ::XuChat::MessageInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
      msg_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetHistoryMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetRecentMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetRecentMsgReq) */ {
 public:
  inline GetRecentMsgReq() : GetRecentMsgReq(nullptr) {}
  ~GetRecentMsgReq() override;
  explicit PROTOBUF_CONSTEXPR GetRecentMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecentMsgReq(const GetRecentMsgReq& from);
  GetRecentMsgReq(GetRecentMsgReq&& from) noexcept
    : GetRecentMsgReq() {
    *this = ::std::move(from);
  }

  inline GetRecentMsgReq& operator=(const GetRecentMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecentMsgReq& operator=(GetRecentMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecentMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecentMsgReq* internal_default_instance() {
    return reinterpret_cast<const GetRecentMsgReq*>(
               &_GetRecentMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRecentMsgReq& a, GetRecentMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecentMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecentMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecentMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecentMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecentMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRecentMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecentMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetRecentMsgReq";
  }
  protected:
  explicit GetRecentMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kChatSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 5,
    kSessionIdFieldNumber = 6,
    kMsgCountFieldNumber = 3,
    kCurTimeFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string chat_session_id = 2;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_id();
  PROTOBUF_NODISCARD std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // optional string user_id = 5;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 6;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // int64 msg_count = 3;
  void clear_msg_count();
  int64_t msg_count() const;
  void set_msg_count(int64_t value);
  private:
  int64_t _internal_msg_count() const;
  void _internal_set_msg_count(int64_t value);
  public:

  // optional int64 cur_time = 4;
  bool has_cur_time() const;
  private:
  bool _internal_has_cur_time() const;
  public:
  void clear_cur_time();
  int64_t cur_time() const;
  void set_cur_time(int64_t value);
  private:
  int64_t _internal_cur_time() const;
  void _internal_set_cur_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetRecentMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  int64_t msg_count_;
  int64_t cur_time_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetRecentMsgRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetRecentMsgRsp) */ {
 public:
  inline GetRecentMsgRsp() : GetRecentMsgRsp(nullptr) {}
  ~GetRecentMsgRsp() override;
  explicit PROTOBUF_CONSTEXPR GetRecentMsgRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecentMsgRsp(const GetRecentMsgRsp& from);
  GetRecentMsgRsp(GetRecentMsgRsp&& from) noexcept
    : GetRecentMsgRsp() {
    *this = ::std::move(from);
  }

  inline GetRecentMsgRsp& operator=(const GetRecentMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecentMsgRsp& operator=(GetRecentMsgRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecentMsgRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecentMsgRsp* internal_default_instance() {
    return reinterpret_cast<const GetRecentMsgRsp*>(
               &_GetRecentMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRecentMsgRsp& a, GetRecentMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecentMsgRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecentMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecentMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecentMsgRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecentMsgRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRecentMsgRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecentMsgRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetRecentMsgRsp";
  }
  protected:
  explicit GetRecentMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .XuChat.MessageInfo msg_list = 4;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::XuChat::MessageInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
      mutable_msg_list();
  private:
  const ::XuChat::MessageInfo& _internal_msg_list(int index) const;
  ::XuChat::MessageInfo* _internal_add_msg_list();
  public:
  const ::XuChat::MessageInfo& msg_list(int index) const;
  ::XuChat::MessageInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
      msg_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetRecentMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MsgSearchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.MsgSearchReq) */ {
 public:
  inline MsgSearchReq() : MsgSearchReq(nullptr) {}
  ~MsgSearchReq() override;
  explicit PROTOBUF_CONSTEXPR MsgSearchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSearchReq(const MsgSearchReq& from);
  MsgSearchReq(MsgSearchReq&& from) noexcept
    : MsgSearchReq() {
    *this = ::std::move(from);
  }

  inline MsgSearchReq& operator=(const MsgSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSearchReq& operator=(MsgSearchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSearchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSearchReq* internal_default_instance() {
    return reinterpret_cast<const MsgSearchReq*>(
               &_MsgSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgSearchReq& a, MsgSearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSearchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSearchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSearchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgSearchReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSearchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.MsgSearchReq";
  }
  protected:
  explicit MsgSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kChatSessionIdFieldNumber = 4,
    kSearchKeyFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string chat_session_id = 4;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_id();
  PROTOBUF_NODISCARD std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // string search_key = 5;
  void clear_search_key();
  const std::string& search_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search_key();
  PROTOBUF_NODISCARD std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // @@protoc_insertion_point(class_scope:XuChat.MsgSearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MsgSearchRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.MsgSearchRsp) */ {
 public:
  inline MsgSearchRsp() : MsgSearchRsp(nullptr) {}
  ~MsgSearchRsp() override;
  explicit PROTOBUF_CONSTEXPR MsgSearchRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSearchRsp(const MsgSearchRsp& from);
  MsgSearchRsp(MsgSearchRsp&& from) noexcept
    : MsgSearchRsp() {
    *this = ::std::move(from);
  }

  inline MsgSearchRsp& operator=(const MsgSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSearchRsp& operator=(MsgSearchRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSearchRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSearchRsp* internal_default_instance() {
    return reinterpret_cast<const MsgSearchRsp*>(
               &_MsgSearchRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgSearchRsp& a, MsgSearchRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSearchRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSearchRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSearchRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSearchRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSearchRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgSearchRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSearchRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.MsgSearchRsp";
  }
  protected:
  explicit MsgSearchRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .XuChat.MessageInfo msg_list = 4;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::XuChat::MessageInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
      mutable_msg_list();
  private:
  const ::XuChat::MessageInfo& _internal_msg_list(int index) const;
  ::XuChat::MessageInfo* _internal_add_msg_list();
  public:
  const ::XuChat::MessageInfo& msg_list(int index) const;
  ::XuChat::MessageInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
      msg_list() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.MsgSearchRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================

class MsgStorageService_Stub;

class MsgStorageService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MsgStorageService() {};
 public:
  virtual ~MsgStorageService();

  typedef MsgStorageService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetHistoryMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetHistoryMsgReq* request,
                       ::XuChat::GetHistoryMsgRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetRecentMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetRecentMsgReq* request,
                       ::XuChat::GetRecentMsgRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void MsgSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::MsgSearchReq* request,
                       ::XuChat::MsgSearchRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgStorageService);
};

class MsgStorageService_Stub : public MsgStorageService {
 public:
  MsgStorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MsgStorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MsgStorageService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MsgStorageService ------------------------------------------

  void GetHistoryMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetHistoryMsgReq* request,
                       ::XuChat::GetHistoryMsgRsp* response,
                       ::google::protobuf::Closure* done);
  void GetRecentMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetRecentMsgReq* request,
                       ::XuChat::GetRecentMsgRsp* response,
                       ::google::protobuf::Closure* done);
  void MsgSearch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::MsgSearchReq* request,
                       ::XuChat::MsgSearchRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgStorageService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetHistoryMsgReq

// string request_id = 1;
inline void GetHistoryMsgReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetHistoryMsgReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.request_id)
}
inline std::string* GetHistoryMsgReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgReq.request_id)
  return _s;
}
inline const std::string& GetHistoryMsgReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetHistoryMsgReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgReq.request_id)
  return request_id_.Release();
}
inline void GetHistoryMsgReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgReq.request_id)
}

// string chat_session_id = 2;
inline void GetHistoryMsgReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmpty();
}
inline const std::string& GetHistoryMsgReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.chat_session_id)
  return _internal_chat_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgReq::set_chat_session_id(ArgT0&& arg0, ArgT... args) {
 
 chat_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.chat_session_id)
}
inline std::string* GetHistoryMsgReq::mutable_chat_session_id() {
  std::string* _s = _internal_mutable_chat_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgReq.chat_session_id)
  return _s;
}
inline const std::string& GetHistoryMsgReq::_internal_chat_session_id() const {
  return chat_session_id_.Get();
}
inline void GetHistoryMsgReq::_internal_set_chat_session_id(const std::string& value) {
  
  chat_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::_internal_mutable_chat_session_id() {
  
  return chat_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgReq.chat_session_id)
  return chat_session_id_.Release();
}
inline void GetHistoryMsgReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.SetAllocated(chat_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_session_id_.IsDefault()) {
    chat_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgReq.chat_session_id)
}

// int64 start_time = 3;
inline void GetHistoryMsgReq::clear_start_time() {
  start_time_ = int64_t{0};
}
inline int64_t GetHistoryMsgReq::_internal_start_time() const {
  return start_time_;
}
inline int64_t GetHistoryMsgReq::start_time() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.start_time)
  return _internal_start_time();
}
inline void GetHistoryMsgReq::_internal_set_start_time(int64_t value) {
  
  start_time_ = value;
}
inline void GetHistoryMsgReq::set_start_time(int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.start_time)
}

// int64 over_time = 4;
inline void GetHistoryMsgReq::clear_over_time() {
  over_time_ = int64_t{0};
}
inline int64_t GetHistoryMsgReq::_internal_over_time() const {
  return over_time_;
}
inline int64_t GetHistoryMsgReq::over_time() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.over_time)
  return _internal_over_time();
}
inline void GetHistoryMsgReq::_internal_set_over_time(int64_t value) {
  
  over_time_ = value;
}
inline void GetHistoryMsgReq::set_over_time(int64_t value) {
  _internal_set_over_time(value);
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.over_time)
}

// optional string user_id = 5;
inline bool GetHistoryMsgReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetHistoryMsgReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetHistoryMsgReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetHistoryMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.user_id)
}
inline std::string* GetHistoryMsgReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgReq.user_id)
  return _s;
}
inline const std::string& GetHistoryMsgReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetHistoryMsgReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetHistoryMsgReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgReq.user_id)
}

// optional string session_id = 6;
inline bool GetHistoryMsgReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetHistoryMsgReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetHistoryMsgReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetHistoryMsgReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgReq.session_id)
}
inline std::string* GetHistoryMsgReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgReq.session_id)
  return _s;
}
inline const std::string& GetHistoryMsgReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetHistoryMsgReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetHistoryMsgReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgReq.session_id)
}

// -------------------------------------------------------------------

// GetHistoryMsgRsp

// string request_id = 1;
inline void GetHistoryMsgRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetHistoryMsgRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgRsp.request_id)
}
inline std::string* GetHistoryMsgRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgRsp.request_id)
  return _s;
}
inline const std::string& GetHistoryMsgRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetHistoryMsgRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgRsp.request_id)
  return request_id_.Release();
}
inline void GetHistoryMsgRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgRsp.request_id)
}

// bool success = 2;
inline void GetHistoryMsgRsp::clear_success() {
  success_ = false;
}
inline bool GetHistoryMsgRsp::_internal_success() const {
  return success_;
}
inline bool GetHistoryMsgRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgRsp.success)
  return _internal_success();
}
inline void GetHistoryMsgRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetHistoryMsgRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgRsp.success)
}

// string errmsg = 3;
inline void GetHistoryMsgRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GetHistoryMsgRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHistoryMsgRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetHistoryMsgRsp.errmsg)
}
inline std::string* GetHistoryMsgRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgRsp.errmsg)
  return _s;
}
inline const std::string& GetHistoryMsgRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetHistoryMsgRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHistoryMsgRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHistoryMsgRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.GetHistoryMsgRsp.errmsg)
  return errmsg_.Release();
}
inline void GetHistoryMsgRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetHistoryMsgRsp.errmsg)
}

// repeated .XuChat.MessageInfo msg_list = 4;
inline int GetHistoryMsgRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int GetHistoryMsgRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::XuChat::MessageInfo* GetHistoryMsgRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.GetHistoryMsgRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
GetHistoryMsgRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.GetHistoryMsgRsp.msg_list)
  return &msg_list_;
}
inline const ::XuChat::MessageInfo& GetHistoryMsgRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::XuChat::MessageInfo& GetHistoryMsgRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.GetHistoryMsgRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::XuChat::MessageInfo* GetHistoryMsgRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::XuChat::MessageInfo* GetHistoryMsgRsp::add_msg_list() {
  ::XuChat::MessageInfo* _add = _internal_add_msg_list();
  // @@protoc_insertion_point(field_add:XuChat.GetHistoryMsgRsp.msg_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
GetHistoryMsgRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:XuChat.GetHistoryMsgRsp.msg_list)
  return msg_list_;
}

// -------------------------------------------------------------------

// GetRecentMsgReq

// string request_id = 1;
inline void GetRecentMsgReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetRecentMsgReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.request_id)
}
inline std::string* GetRecentMsgReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgReq.request_id)
  return _s;
}
inline const std::string& GetRecentMsgReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetRecentMsgReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgReq.request_id)
  return request_id_.Release();
}
inline void GetRecentMsgReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgReq.request_id)
}

// string chat_session_id = 2;
inline void GetRecentMsgReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmpty();
}
inline const std::string& GetRecentMsgReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.chat_session_id)
  return _internal_chat_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgReq::set_chat_session_id(ArgT0&& arg0, ArgT... args) {
 
 chat_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.chat_session_id)
}
inline std::string* GetRecentMsgReq::mutable_chat_session_id() {
  std::string* _s = _internal_mutable_chat_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgReq.chat_session_id)
  return _s;
}
inline const std::string& GetRecentMsgReq::_internal_chat_session_id() const {
  return chat_session_id_.Get();
}
inline void GetRecentMsgReq::_internal_set_chat_session_id(const std::string& value) {
  
  chat_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::_internal_mutable_chat_session_id() {
  
  return chat_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgReq.chat_session_id)
  return chat_session_id_.Release();
}
inline void GetRecentMsgReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.SetAllocated(chat_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_session_id_.IsDefault()) {
    chat_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgReq.chat_session_id)
}

// int64 msg_count = 3;
inline void GetRecentMsgReq::clear_msg_count() {
  msg_count_ = int64_t{0};
}
inline int64_t GetRecentMsgReq::_internal_msg_count() const {
  return msg_count_;
}
inline int64_t GetRecentMsgReq::msg_count() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.msg_count)
  return _internal_msg_count();
}
inline void GetRecentMsgReq::_internal_set_msg_count(int64_t value) {
  
  msg_count_ = value;
}
inline void GetRecentMsgReq::set_msg_count(int64_t value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.msg_count)
}

// optional int64 cur_time = 4;
inline bool GetRecentMsgReq::_internal_has_cur_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetRecentMsgReq::has_cur_time() const {
  return _internal_has_cur_time();
}
inline void GetRecentMsgReq::clear_cur_time() {
  cur_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t GetRecentMsgReq::_internal_cur_time() const {
  return cur_time_;
}
inline int64_t GetRecentMsgReq::cur_time() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.cur_time)
  return _internal_cur_time();
}
inline void GetRecentMsgReq::_internal_set_cur_time(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  cur_time_ = value;
}
inline void GetRecentMsgReq::set_cur_time(int64_t value) {
  _internal_set_cur_time(value);
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.cur_time)
}

// optional string user_id = 5;
inline bool GetRecentMsgReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetRecentMsgReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetRecentMsgReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetRecentMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.user_id)
}
inline std::string* GetRecentMsgReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgReq.user_id)
  return _s;
}
inline const std::string& GetRecentMsgReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetRecentMsgReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetRecentMsgReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgReq.user_id)
}

// optional string session_id = 6;
inline bool GetRecentMsgReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetRecentMsgReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetRecentMsgReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetRecentMsgReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgReq.session_id)
}
inline std::string* GetRecentMsgReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgReq.session_id)
  return _s;
}
inline const std::string& GetRecentMsgReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetRecentMsgReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetRecentMsgReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgReq.session_id)
}

// -------------------------------------------------------------------

// GetRecentMsgRsp

// string request_id = 1;
inline void GetRecentMsgRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetRecentMsgRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgRsp.request_id)
}
inline std::string* GetRecentMsgRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgRsp.request_id)
  return _s;
}
inline const std::string& GetRecentMsgRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetRecentMsgRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgRsp.request_id)
  return request_id_.Release();
}
inline void GetRecentMsgRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgRsp.request_id)
}

// bool success = 2;
inline void GetRecentMsgRsp::clear_success() {
  success_ = false;
}
inline bool GetRecentMsgRsp::_internal_success() const {
  return success_;
}
inline bool GetRecentMsgRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgRsp.success)
  return _internal_success();
}
inline void GetRecentMsgRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetRecentMsgRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgRsp.success)
}

// string errmsg = 3;
inline void GetRecentMsgRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GetRecentMsgRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentMsgRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetRecentMsgRsp.errmsg)
}
inline std::string* GetRecentMsgRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgRsp.errmsg)
  return _s;
}
inline const std::string& GetRecentMsgRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetRecentMsgRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentMsgRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentMsgRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.GetRecentMsgRsp.errmsg)
  return errmsg_.Release();
}
inline void GetRecentMsgRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetRecentMsgRsp.errmsg)
}

// repeated .XuChat.MessageInfo msg_list = 4;
inline int GetRecentMsgRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int GetRecentMsgRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::XuChat::MessageInfo* GetRecentMsgRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.GetRecentMsgRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
GetRecentMsgRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.GetRecentMsgRsp.msg_list)
  return &msg_list_;
}
inline const ::XuChat::MessageInfo& GetRecentMsgRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::XuChat::MessageInfo& GetRecentMsgRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.GetRecentMsgRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::XuChat::MessageInfo* GetRecentMsgRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::XuChat::MessageInfo* GetRecentMsgRsp::add_msg_list() {
  ::XuChat::MessageInfo* _add = _internal_add_msg_list();
  // @@protoc_insertion_point(field_add:XuChat.GetRecentMsgRsp.msg_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
GetRecentMsgRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:XuChat.GetRecentMsgRsp.msg_list)
  return msg_list_;
}

// -------------------------------------------------------------------

// MsgSearchReq

// string request_id = 1;
inline void MsgSearchReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& MsgSearchReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchReq.request_id)
}
inline std::string* MsgSearchReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchReq.request_id)
  return _s;
}
inline const std::string& MsgSearchReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void MsgSearchReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchReq.request_id)
  return request_id_.Release();
}
inline void MsgSearchReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchReq.request_id)
}

// optional string user_id = 2;
inline bool MsgSearchReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MsgSearchReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void MsgSearchReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MsgSearchReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchReq.user_id)
}
inline std::string* MsgSearchReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchReq.user_id)
  return _s;
}
inline const std::string& MsgSearchReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void MsgSearchReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MsgSearchReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchReq.user_id)
}

// optional string session_id = 3;
inline bool MsgSearchReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MsgSearchReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void MsgSearchReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MsgSearchReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchReq.session_id)
}
inline std::string* MsgSearchReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchReq.session_id)
  return _s;
}
inline const std::string& MsgSearchReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void MsgSearchReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MsgSearchReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchReq.session_id)
}

// string chat_session_id = 4;
inline void MsgSearchReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmpty();
}
inline const std::string& MsgSearchReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchReq.chat_session_id)
  return _internal_chat_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchReq::set_chat_session_id(ArgT0&& arg0, ArgT... args) {
 
 chat_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchReq.chat_session_id)
}
inline std::string* MsgSearchReq::mutable_chat_session_id() {
  std::string* _s = _internal_mutable_chat_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchReq.chat_session_id)
  return _s;
}
inline const std::string& MsgSearchReq::_internal_chat_session_id() const {
  return chat_session_id_.Get();
}
inline void MsgSearchReq::_internal_set_chat_session_id(const std::string& value) {
  
  chat_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchReq::_internal_mutable_chat_session_id() {
  
  return chat_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchReq.chat_session_id)
  return chat_session_id_.Release();
}
inline void MsgSearchReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.SetAllocated(chat_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_session_id_.IsDefault()) {
    chat_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchReq.chat_session_id)
}

// string search_key = 5;
inline void MsgSearchReq::clear_search_key() {
  search_key_.ClearToEmpty();
}
inline const std::string& MsgSearchReq::search_key() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchReq.search_key)
  return _internal_search_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchReq::set_search_key(ArgT0&& arg0, ArgT... args) {
 
 search_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchReq.search_key)
}
inline std::string* MsgSearchReq::mutable_search_key() {
  std::string* _s = _internal_mutable_search_key();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchReq.search_key)
  return _s;
}
inline const std::string& MsgSearchReq::_internal_search_key() const {
  return search_key_.Get();
}
inline void MsgSearchReq::_internal_set_search_key(const std::string& value) {
  
  search_key_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchReq::_internal_mutable_search_key() {
  
  return search_key_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchReq::release_search_key() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchReq.search_key)
  return search_key_.Release();
}
inline void MsgSearchReq::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    
  } else {
    
  }
  search_key_.SetAllocated(search_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_key_.IsDefault()) {
    search_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchReq.search_key)
}

// -------------------------------------------------------------------

// MsgSearchRsp

// string request_id = 1;
inline void MsgSearchRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& MsgSearchRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchRsp.request_id)
}
inline std::string* MsgSearchRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchRsp.request_id)
  return _s;
}
inline const std::string& MsgSearchRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void MsgSearchRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchRsp.request_id)
  return request_id_.Release();
}
inline void MsgSearchRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchRsp.request_id)
}

// bool success = 2;
inline void MsgSearchRsp::clear_success() {
  success_ = false;
}
inline bool MsgSearchRsp::_internal_success() const {
  return success_;
}
inline bool MsgSearchRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchRsp.success)
  return _internal_success();
}
inline void MsgSearchRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void MsgSearchRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchRsp.success)
}

// string errmsg = 3;
inline void MsgSearchRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& MsgSearchRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSearchRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.MsgSearchRsp.errmsg)
}
inline std::string* MsgSearchRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchRsp.errmsg)
  return _s;
}
inline const std::string& MsgSearchRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void MsgSearchRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSearchRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgSearchRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.MsgSearchRsp.errmsg)
  return errmsg_.Release();
}
inline void MsgSearchRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.MsgSearchRsp.errmsg)
}

// repeated .XuChat.MessageInfo msg_list = 4;
inline int MsgSearchRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int MsgSearchRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::XuChat::MessageInfo* MsgSearchRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.MsgSearchRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >*
MsgSearchRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.MsgSearchRsp.msg_list)
  return &msg_list_;
}
inline const ::XuChat::MessageInfo& MsgSearchRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::XuChat::MessageInfo& MsgSearchRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.MsgSearchRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::XuChat::MessageInfo* MsgSearchRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::XuChat::MessageInfo* MsgSearchRsp::add_msg_list() {
  ::XuChat::MessageInfo* _add = _internal_add_msg_list();
  // @@protoc_insertion_point(field_add:XuChat.MsgSearchRsp.msg_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::MessageInfo >&
MsgSearchRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:XuChat.MsgSearchRsp.msg_list)
  return msg_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XuChat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
