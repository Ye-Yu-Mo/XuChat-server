// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_speech_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_speech_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_speech_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_speech_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speech_2eproto;
namespace XuChat {
class SpeechRecognitionReq;
struct SpeechRecognitionReqDefaultTypeInternal;
extern SpeechRecognitionReqDefaultTypeInternal _SpeechRecognitionReq_default_instance_;
class SpeechRecognitionRsp;
struct SpeechRecognitionRspDefaultTypeInternal;
extern SpeechRecognitionRspDefaultTypeInternal _SpeechRecognitionRsp_default_instance_;
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> ::XuChat::SpeechRecognitionReq* Arena::CreateMaybeMessage<::XuChat::SpeechRecognitionReq>(Arena*);
template<> ::XuChat::SpeechRecognitionRsp* Arena::CreateMaybeMessage<::XuChat::SpeechRecognitionRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XuChat {

// ===================================================================

class SpeechRecognitionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.SpeechRecognitionReq) */ {
 public:
  inline SpeechRecognitionReq() : SpeechRecognitionReq(nullptr) {}
  ~SpeechRecognitionReq() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionReq(const SpeechRecognitionReq& from);
  SpeechRecognitionReq(SpeechRecognitionReq&& from) noexcept
    : SpeechRecognitionReq() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionReq& operator=(const SpeechRecognitionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionReq& operator=(SpeechRecognitionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionReq* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionReq*>(
               &_SpeechRecognitionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeechRecognitionReq& a, SpeechRecognitionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeechRecognitionReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.SpeechRecognitionReq";
  }
  protected:
  explicit SpeechRecognitionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSpeechContentFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bytes speech_content = 2;
  void clear_speech_content();
  const std::string& speech_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_speech_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_speech_content();
  PROTOBUF_NODISCARD std::string* release_speech_content();
  void set_allocated_speech_content(std::string* speech_content);
  private:
  const std::string& _internal_speech_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speech_content(const std::string& value);
  std::string* _internal_mutable_speech_content();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:XuChat.SpeechRecognitionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speech_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_speech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.SpeechRecognitionRsp) */ {
 public:
  inline SpeechRecognitionRsp() : SpeechRecognitionRsp(nullptr) {}
  ~SpeechRecognitionRsp() override;
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeechRecognitionRsp(const SpeechRecognitionRsp& from);
  SpeechRecognitionRsp(SpeechRecognitionRsp&& from) noexcept
    : SpeechRecognitionRsp() {
    *this = ::std::move(from);
  }

  inline SpeechRecognitionRsp& operator=(const SpeechRecognitionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionRsp& operator=(SpeechRecognitionRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionRsp* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionRsp*>(
               &_SpeechRecognitionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpeechRecognitionRsp& a, SpeechRecognitionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechRecognitionRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeechRecognitionRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeechRecognitionRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechRecognitionRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.SpeechRecognitionRsp";
  }
  protected:
  explicit SpeechRecognitionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kRecognitionResultFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string errmsg = 3;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string recognition_result = 4;
  bool has_recognition_result() const;
  private:
  bool _internal_has_recognition_result() const;
  public:
  void clear_recognition_result();
  const std::string& recognition_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recognition_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recognition_result();
  PROTOBUF_NODISCARD std::string* release_recognition_result();
  void set_allocated_recognition_result(std::string* recognition_result);
  private:
  const std::string& _internal_recognition_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recognition_result(const std::string& value);
  std::string* _internal_mutable_recognition_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.SpeechRecognitionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recognition_result_;
  bool success_;
  friend struct ::TableStruct_speech_2eproto;
};
// ===================================================================

class SpeechService_Stub;

class SpeechService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SpeechService() {};
 public:
  virtual ~SpeechService();

  typedef SpeechService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SpeechRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::SpeechRecognitionReq* request,
                       ::XuChat::SpeechRecognitionRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SpeechService);
};

class SpeechService_Stub : public SpeechService {
 public:
  SpeechService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SpeechService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SpeechService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SpeechService ------------------------------------------

  void SpeechRecognition(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::SpeechRecognitionReq* request,
                       ::XuChat::SpeechRecognitionRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SpeechService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeechRecognitionReq

// string request_id = 1;
inline void SpeechRecognitionReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionReq.request_id)
}
inline std::string* SpeechRecognitionReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionReq.request_id)
  return _s;
}
inline const std::string& SpeechRecognitionReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void SpeechRecognitionReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionReq.request_id)
  return request_id_.Release();
}
inline void SpeechRecognitionReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionReq.request_id)
}

// bytes speech_content = 2;
inline void SpeechRecognitionReq::clear_speech_content() {
  speech_content_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionReq::speech_content() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionReq.speech_content)
  return _internal_speech_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionReq::set_speech_content(ArgT0&& arg0, ArgT... args) {
 
 speech_content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionReq.speech_content)
}
inline std::string* SpeechRecognitionReq::mutable_speech_content() {
  std::string* _s = _internal_mutable_speech_content();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionReq.speech_content)
  return _s;
}
inline const std::string& SpeechRecognitionReq::_internal_speech_content() const {
  return speech_content_.Get();
}
inline void SpeechRecognitionReq::_internal_set_speech_content(const std::string& value) {
  
  speech_content_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::_internal_mutable_speech_content() {
  
  return speech_content_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::release_speech_content() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionReq.speech_content)
  return speech_content_.Release();
}
inline void SpeechRecognitionReq::set_allocated_speech_content(std::string* speech_content) {
  if (speech_content != nullptr) {
    
  } else {
    
  }
  speech_content_.SetAllocated(speech_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (speech_content_.IsDefault()) {
    speech_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionReq.speech_content)
}

// optional string user_id = 3;
inline bool SpeechRecognitionReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeechRecognitionReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void SpeechRecognitionReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeechRecognitionReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionReq.user_id)
}
inline std::string* SpeechRecognitionReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionReq.user_id)
  return _s;
}
inline const std::string& SpeechRecognitionReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void SpeechRecognitionReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpeechRecognitionReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionReq.user_id)
}

// optional string session_id = 4;
inline bool SpeechRecognitionReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeechRecognitionReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void SpeechRecognitionReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpeechRecognitionReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionReq.session_id)
}
inline std::string* SpeechRecognitionReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionReq.session_id)
  return _s;
}
inline const std::string& SpeechRecognitionReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void SpeechRecognitionReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpeechRecognitionReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionReq.session_id)
}

// -------------------------------------------------------------------

// SpeechRecognitionRsp

// string request_id = 1;
inline void SpeechRecognitionRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionRsp.request_id)
}
inline std::string* SpeechRecognitionRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionRsp.request_id)
  return _s;
}
inline const std::string& SpeechRecognitionRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void SpeechRecognitionRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionRsp.request_id)
  return request_id_.Release();
}
inline void SpeechRecognitionRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionRsp.request_id)
}

// bool success = 2;
inline void SpeechRecognitionRsp::clear_success() {
  success_ = false;
}
inline bool SpeechRecognitionRsp::_internal_success() const {
  return success_;
}
inline bool SpeechRecognitionRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionRsp.success)
  return _internal_success();
}
inline void SpeechRecognitionRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SpeechRecognitionRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionRsp.success)
}

// optional string errmsg = 3;
inline bool SpeechRecognitionRsp::_internal_has_errmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeechRecognitionRsp::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void SpeechRecognitionRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeechRecognitionRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionRsp.errmsg)
}
inline std::string* SpeechRecognitionRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionRsp.errmsg)
  return _s;
}
inline const std::string& SpeechRecognitionRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void SpeechRecognitionRsp::_internal_set_errmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::_internal_mutable_errmsg() {
  _has_bits_[0] |= 0x00000001u;
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionRsp.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpeechRecognitionRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionRsp.errmsg)
}

// optional string recognition_result = 4;
inline bool SpeechRecognitionRsp::_internal_has_recognition_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeechRecognitionRsp::has_recognition_result() const {
  return _internal_has_recognition_result();
}
inline void SpeechRecognitionRsp::clear_recognition_result() {
  recognition_result_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpeechRecognitionRsp::recognition_result() const {
  // @@protoc_insertion_point(field_get:XuChat.SpeechRecognitionRsp.recognition_result)
  return _internal_recognition_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeechRecognitionRsp::set_recognition_result(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 recognition_result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.SpeechRecognitionRsp.recognition_result)
}
inline std::string* SpeechRecognitionRsp::mutable_recognition_result() {
  std::string* _s = _internal_mutable_recognition_result();
  // @@protoc_insertion_point(field_mutable:XuChat.SpeechRecognitionRsp.recognition_result)
  return _s;
}
inline const std::string& SpeechRecognitionRsp::_internal_recognition_result() const {
  return recognition_result_.Get();
}
inline void SpeechRecognitionRsp::_internal_set_recognition_result(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  recognition_result_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::_internal_mutable_recognition_result() {
  _has_bits_[0] |= 0x00000002u;
  return recognition_result_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeechRecognitionRsp::release_recognition_result() {
  // @@protoc_insertion_point(field_release:XuChat.SpeechRecognitionRsp.recognition_result)
  if (!_internal_has_recognition_result()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = recognition_result_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recognition_result_.IsDefault()) {
    recognition_result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpeechRecognitionRsp::set_allocated_recognition_result(std::string* recognition_result) {
  if (recognition_result != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  recognition_result_.SetAllocated(recognition_result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (recognition_result_.IsDefault()) {
    recognition_result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.SpeechRecognitionRsp.recognition_result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XuChat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_speech_2eproto
