// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transmite.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transmite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transmite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transmite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transmite_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transmite_2eproto;
namespace XuChat {
class GetTransmitTargetRsp;
struct GetTransmitTargetRspDefaultTypeInternal;
extern GetTransmitTargetRspDefaultTypeInternal _GetTransmitTargetRsp_default_instance_;
class NewMessageReq;
struct NewMessageReqDefaultTypeInternal;
extern NewMessageReqDefaultTypeInternal _NewMessageReq_default_instance_;
class NewMessageRsp;
struct NewMessageRspDefaultTypeInternal;
extern NewMessageRspDefaultTypeInternal _NewMessageRsp_default_instance_;
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> ::XuChat::GetTransmitTargetRsp* Arena::CreateMaybeMessage<::XuChat::GetTransmitTargetRsp>(Arena*);
template<> ::XuChat::NewMessageReq* Arena::CreateMaybeMessage<::XuChat::NewMessageReq>(Arena*);
template<> ::XuChat::NewMessageRsp* Arena::CreateMaybeMessage<::XuChat::NewMessageRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XuChat {

// ===================================================================

class NewMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.NewMessageReq) */ {
 public:
  inline NewMessageReq() : NewMessageReq(nullptr) {}
  ~NewMessageReq() override;
  explicit PROTOBUF_CONSTEXPR NewMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewMessageReq(const NewMessageReq& from);
  NewMessageReq(NewMessageReq&& from) noexcept
    : NewMessageReq() {
    *this = ::std::move(from);
  }

  inline NewMessageReq& operator=(const NewMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMessageReq& operator=(NewMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewMessageReq* internal_default_instance() {
    return reinterpret_cast<const NewMessageReq*>(
               &_NewMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewMessageReq& a, NewMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NewMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewMessageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewMessageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewMessageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.NewMessageReq";
  }
  protected:
  explicit NewMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kChatSessionIdFieldNumber = 4,
    kMessageFieldNumber = 5,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string chat_session_id = 4;
  void clear_chat_session_id();
  const std::string& chat_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_session_id();
  PROTOBUF_NODISCARD std::string* release_chat_session_id();
  void set_allocated_chat_session_id(std::string* chat_session_id);
  private:
  const std::string& _internal_chat_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_session_id(const std::string& value);
  std::string* _internal_mutable_chat_session_id();
  public:

  // .XuChat.MessageContent message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::XuChat::MessageContent& message() const;
  PROTOBUF_NODISCARD ::XuChat::MessageContent* release_message();
  ::XuChat::MessageContent* mutable_message();
  void set_allocated_message(::XuChat::MessageContent* message);
  private:
  const ::XuChat::MessageContent& _internal_message() const;
  ::XuChat::MessageContent* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::XuChat::MessageContent* message);
  ::XuChat::MessageContent* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:XuChat.NewMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_session_id_;
  ::XuChat::MessageContent* message_;
  friend struct ::TableStruct_transmite_2eproto;
};
// -------------------------------------------------------------------

class NewMessageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.NewMessageRsp) */ {
 public:
  inline NewMessageRsp() : NewMessageRsp(nullptr) {}
  ~NewMessageRsp() override;
  explicit PROTOBUF_CONSTEXPR NewMessageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewMessageRsp(const NewMessageRsp& from);
  NewMessageRsp(NewMessageRsp&& from) noexcept
    : NewMessageRsp() {
    *this = ::std::move(from);
  }

  inline NewMessageRsp& operator=(const NewMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMessageRsp& operator=(NewMessageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewMessageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewMessageRsp* internal_default_instance() {
    return reinterpret_cast<const NewMessageRsp*>(
               &_NewMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewMessageRsp& a, NewMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(NewMessageRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewMessageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewMessageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewMessageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMessageRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.NewMessageRsp";
  }
  protected:
  explicit NewMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.NewMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transmite_2eproto;
};
// -------------------------------------------------------------------

class GetTransmitTargetRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetTransmitTargetRsp) */ {
 public:
  inline GetTransmitTargetRsp() : GetTransmitTargetRsp(nullptr) {}
  ~GetTransmitTargetRsp() override;
  explicit PROTOBUF_CONSTEXPR GetTransmitTargetRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransmitTargetRsp(const GetTransmitTargetRsp& from);
  GetTransmitTargetRsp(GetTransmitTargetRsp&& from) noexcept
    : GetTransmitTargetRsp() {
    *this = ::std::move(from);
  }

  inline GetTransmitTargetRsp& operator=(const GetTransmitTargetRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransmitTargetRsp& operator=(GetTransmitTargetRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransmitTargetRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransmitTargetRsp* internal_default_instance() {
    return reinterpret_cast<const GetTransmitTargetRsp*>(
               &_GetTransmitTargetRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTransmitTargetRsp& a, GetTransmitTargetRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransmitTargetRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransmitTargetRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransmitTargetRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransmitTargetRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransmitTargetRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTransmitTargetRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransmitTargetRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetTransmitTargetRsp";
  }
  protected:
  explicit GetTransmitTargetRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdListFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kMessageFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // repeated string target_id_list = 5;
  int target_id_list_size() const;
  private:
  int _internal_target_id_list_size() const;
  public:
  void clear_target_id_list();
  const std::string& target_id_list(int index) const;
  std::string* mutable_target_id_list(int index);
  void set_target_id_list(int index, const std::string& value);
  void set_target_id_list(int index, std::string&& value);
  void set_target_id_list(int index, const char* value);
  void set_target_id_list(int index, const char* value, size_t size);
  std::string* add_target_id_list();
  void add_target_id_list(const std::string& value);
  void add_target_id_list(std::string&& value);
  void add_target_id_list(const char* value);
  void add_target_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_id_list();
  private:
  const std::string& _internal_target_id_list(int index) const;
  std::string* _internal_add_target_id_list();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .XuChat.MessageInfo message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::XuChat::MessageInfo& message() const;
  PROTOBUF_NODISCARD ::XuChat::MessageInfo* release_message();
  ::XuChat::MessageInfo* mutable_message();
  void set_allocated_message(::XuChat::MessageInfo* message);
  private:
  const ::XuChat::MessageInfo& _internal_message() const;
  ::XuChat::MessageInfo* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::XuChat::MessageInfo* message);
  ::XuChat::MessageInfo* unsafe_arena_release_message();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetTransmitTargetRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::XuChat::MessageInfo* message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transmite_2eproto;
};
// ===================================================================

class MsgTransmitService_Stub;

class MsgTransmitService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MsgTransmitService() {};
 public:
  virtual ~MsgTransmitService();

  typedef MsgTransmitService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetTransmitTarget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::NewMessageReq* request,
                       ::XuChat::GetTransmitTargetRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgTransmitService);
};

class MsgTransmitService_Stub : public MsgTransmitService {
 public:
  MsgTransmitService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MsgTransmitService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MsgTransmitService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MsgTransmitService ------------------------------------------

  void GetTransmitTarget(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::NewMessageReq* request,
                       ::XuChat::GetTransmitTargetRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MsgTransmitService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewMessageReq

// string request_id = 1;
inline void NewMessageReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& NewMessageReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageReq.request_id)
}
inline std::string* NewMessageReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageReq.request_id)
  return _s;
}
inline const std::string& NewMessageReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void NewMessageReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageReq.request_id)
  return request_id_.Release();
}
inline void NewMessageReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageReq.request_id)
}

// optional string user_id = 2;
inline bool NewMessageReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewMessageReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void NewMessageReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageReq.user_id)
}
inline std::string* NewMessageReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageReq.user_id)
  return _s;
}
inline const std::string& NewMessageReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void NewMessageReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewMessageReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageReq.user_id)
}

// optional string session_id = 3;
inline bool NewMessageReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NewMessageReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void NewMessageReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NewMessageReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageReq.session_id)
}
inline std::string* NewMessageReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageReq.session_id)
  return _s;
}
inline const std::string& NewMessageReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void NewMessageReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewMessageReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageReq.session_id)
}

// string chat_session_id = 4;
inline void NewMessageReq::clear_chat_session_id() {
  chat_session_id_.ClearToEmpty();
}
inline const std::string& NewMessageReq::chat_session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageReq.chat_session_id)
  return _internal_chat_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageReq::set_chat_session_id(ArgT0&& arg0, ArgT... args) {
 
 chat_session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageReq.chat_session_id)
}
inline std::string* NewMessageReq::mutable_chat_session_id() {
  std::string* _s = _internal_mutable_chat_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageReq.chat_session_id)
  return _s;
}
inline const std::string& NewMessageReq::_internal_chat_session_id() const {
  return chat_session_id_.Get();
}
inline void NewMessageReq::_internal_set_chat_session_id(const std::string& value) {
  
  chat_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageReq::_internal_mutable_chat_session_id() {
  
  return chat_session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageReq::release_chat_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageReq.chat_session_id)
  return chat_session_id_.Release();
}
inline void NewMessageReq::set_allocated_chat_session_id(std::string* chat_session_id) {
  if (chat_session_id != nullptr) {
    
  } else {
    
  }
  chat_session_id_.SetAllocated(chat_session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_session_id_.IsDefault()) {
    chat_session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageReq.chat_session_id)
}

// .XuChat.MessageContent message = 5;
inline bool NewMessageReq::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool NewMessageReq::has_message() const {
  return _internal_has_message();
}
inline const ::XuChat::MessageContent& NewMessageReq::_internal_message() const {
  const ::XuChat::MessageContent* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuChat::MessageContent&>(
      ::XuChat::_MessageContent_default_instance_);
}
inline const ::XuChat::MessageContent& NewMessageReq::message() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageReq.message)
  return _internal_message();
}
inline void NewMessageReq::unsafe_arena_set_allocated_message(
    ::XuChat::MessageContent* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuChat.NewMessageReq.message)
}
inline ::XuChat::MessageContent* NewMessageReq::release_message() {
  
  ::XuChat::MessageContent* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuChat::MessageContent* NewMessageReq::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageReq.message)
  
  ::XuChat::MessageContent* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::XuChat::MessageContent* NewMessageReq::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuChat::MessageContent>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::XuChat::MessageContent* NewMessageReq::mutable_message() {
  ::XuChat::MessageContent* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageReq.message)
  return _msg;
}
inline void NewMessageReq::set_allocated_message(::XuChat::MessageContent* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageReq.message)
}

// -------------------------------------------------------------------

// NewMessageRsp

// string request_id = 1;
inline void NewMessageRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& NewMessageRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageRsp.request_id)
}
inline std::string* NewMessageRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageRsp.request_id)
  return _s;
}
inline const std::string& NewMessageRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void NewMessageRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageRsp.request_id)
  return request_id_.Release();
}
inline void NewMessageRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageRsp.request_id)
}

// bool success = 2;
inline void NewMessageRsp::clear_success() {
  success_ = false;
}
inline bool NewMessageRsp::_internal_success() const {
  return success_;
}
inline bool NewMessageRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageRsp.success)
  return _internal_success();
}
inline void NewMessageRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NewMessageRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.NewMessageRsp.success)
}

// string errmsg = 3;
inline void NewMessageRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& NewMessageRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.NewMessageRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewMessageRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.NewMessageRsp.errmsg)
}
inline std::string* NewMessageRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.NewMessageRsp.errmsg)
  return _s;
}
inline const std::string& NewMessageRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void NewMessageRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* NewMessageRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* NewMessageRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.NewMessageRsp.errmsg)
  return errmsg_.Release();
}
inline void NewMessageRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.NewMessageRsp.errmsg)
}

// -------------------------------------------------------------------

// GetTransmitTargetRsp

// string request_id = 1;
inline void GetTransmitTargetRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetTransmitTargetRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetTransmitTargetRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransmitTargetRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetTransmitTargetRsp.request_id)
}
inline std::string* GetTransmitTargetRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetTransmitTargetRsp.request_id)
  return _s;
}
inline const std::string& GetTransmitTargetRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetTransmitTargetRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransmitTargetRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransmitTargetRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetTransmitTargetRsp.request_id)
  return request_id_.Release();
}
inline void GetTransmitTargetRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetTransmitTargetRsp.request_id)
}

// bool success = 2;
inline void GetTransmitTargetRsp::clear_success() {
  success_ = false;
}
inline bool GetTransmitTargetRsp::_internal_success() const {
  return success_;
}
inline bool GetTransmitTargetRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.GetTransmitTargetRsp.success)
  return _internal_success();
}
inline void GetTransmitTargetRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetTransmitTargetRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.GetTransmitTargetRsp.success)
}

// string errmsg = 3;
inline void GetTransmitTargetRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GetTransmitTargetRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.GetTransmitTargetRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransmitTargetRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetTransmitTargetRsp.errmsg)
}
inline std::string* GetTransmitTargetRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.GetTransmitTargetRsp.errmsg)
  return _s;
}
inline const std::string& GetTransmitTargetRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetTransmitTargetRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransmitTargetRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransmitTargetRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.GetTransmitTargetRsp.errmsg)
  return errmsg_.Release();
}
inline void GetTransmitTargetRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetTransmitTargetRsp.errmsg)
}

// .XuChat.MessageInfo message = 4;
inline bool GetTransmitTargetRsp::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool GetTransmitTargetRsp::has_message() const {
  return _internal_has_message();
}
inline const ::XuChat::MessageInfo& GetTransmitTargetRsp::_internal_message() const {
  const ::XuChat::MessageInfo* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuChat::MessageInfo&>(
      ::XuChat::_MessageInfo_default_instance_);
}
inline const ::XuChat::MessageInfo& GetTransmitTargetRsp::message() const {
  // @@protoc_insertion_point(field_get:XuChat.GetTransmitTargetRsp.message)
  return _internal_message();
}
inline void GetTransmitTargetRsp::unsafe_arena_set_allocated_message(
    ::XuChat::MessageInfo* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuChat.GetTransmitTargetRsp.message)
}
inline ::XuChat::MessageInfo* GetTransmitTargetRsp::release_message() {
  
  ::XuChat::MessageInfo* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuChat::MessageInfo* GetTransmitTargetRsp::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:XuChat.GetTransmitTargetRsp.message)
  
  ::XuChat::MessageInfo* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::XuChat::MessageInfo* GetTransmitTargetRsp::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuChat::MessageInfo>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::XuChat::MessageInfo* GetTransmitTargetRsp::mutable_message() {
  ::XuChat::MessageInfo* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:XuChat.GetTransmitTargetRsp.message)
  return _msg;
}
inline void GetTransmitTargetRsp::set_allocated_message(::XuChat::MessageInfo* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetTransmitTargetRsp.message)
}

// repeated string target_id_list = 5;
inline int GetTransmitTargetRsp::_internal_target_id_list_size() const {
  return target_id_list_.size();
}
inline int GetTransmitTargetRsp::target_id_list_size() const {
  return _internal_target_id_list_size();
}
inline void GetTransmitTargetRsp::clear_target_id_list() {
  target_id_list_.Clear();
}
inline std::string* GetTransmitTargetRsp::add_target_id_list() {
  std::string* _s = _internal_add_target_id_list();
  // @@protoc_insertion_point(field_add_mutable:XuChat.GetTransmitTargetRsp.target_id_list)
  return _s;
}
inline const std::string& GetTransmitTargetRsp::_internal_target_id_list(int index) const {
  return target_id_list_.Get(index);
}
inline const std::string& GetTransmitTargetRsp::target_id_list(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.GetTransmitTargetRsp.target_id_list)
  return _internal_target_id_list(index);
}
inline std::string* GetTransmitTargetRsp::mutable_target_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.GetTransmitTargetRsp.target_id_list)
  return target_id_list_.Mutable(index);
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, const std::string& value) {
  target_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, std::string&& value) {
  target_id_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::set_target_id_list(int index, const char* value, size_t size) {
  target_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline std::string* GetTransmitTargetRsp::_internal_add_target_id_list() {
  return target_id_list_.Add();
}
inline void GetTransmitTargetRsp::add_target_id_list(const std::string& value) {
  target_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::add_target_id_list(std::string&& value) {
  target_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::add_target_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline void GetTransmitTargetRsp::add_target_id_list(const char* value, size_t size) {
  target_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XuChat.GetTransmitTargetRsp.target_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTransmitTargetRsp::target_id_list() const {
  // @@protoc_insertion_point(field_list:XuChat.GetTransmitTargetRsp.target_id_list)
  return target_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTransmitTargetRsp::mutable_target_id_list() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.GetTransmitTargetRsp.target_id_list)
  return &target_id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XuChat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transmite_2eproto
