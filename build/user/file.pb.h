// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace XuChat {
class GetMultiFileReq;
struct GetMultiFileReqDefaultTypeInternal;
extern GetMultiFileReqDefaultTypeInternal _GetMultiFileReq_default_instance_;
class GetMultiFileRsp;
struct GetMultiFileRspDefaultTypeInternal;
extern GetMultiFileRspDefaultTypeInternal _GetMultiFileRsp_default_instance_;
class GetMultiFileRsp_FileDataEntry_DoNotUse;
struct GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal;
extern GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal _GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_;
class GetSingleFileReq;
struct GetSingleFileReqDefaultTypeInternal;
extern GetSingleFileReqDefaultTypeInternal _GetSingleFileReq_default_instance_;
class GetSingleFileRsp;
struct GetSingleFileRspDefaultTypeInternal;
extern GetSingleFileRspDefaultTypeInternal _GetSingleFileRsp_default_instance_;
class PutMultiFileReq;
struct PutMultiFileReqDefaultTypeInternal;
extern PutMultiFileReqDefaultTypeInternal _PutMultiFileReq_default_instance_;
class PutMultiFileRsp;
struct PutMultiFileRspDefaultTypeInternal;
extern PutMultiFileRspDefaultTypeInternal _PutMultiFileRsp_default_instance_;
class PutSingleFileReq;
struct PutSingleFileReqDefaultTypeInternal;
extern PutSingleFileReqDefaultTypeInternal _PutSingleFileReq_default_instance_;
class PutSingleFileRsp;
struct PutSingleFileRspDefaultTypeInternal;
extern PutSingleFileRspDefaultTypeInternal _PutSingleFileRsp_default_instance_;
}  // namespace XuChat
PROTOBUF_NAMESPACE_OPEN
template<> ::XuChat::GetMultiFileReq* Arena::CreateMaybeMessage<::XuChat::GetMultiFileReq>(Arena*);
template<> ::XuChat::GetMultiFileRsp* Arena::CreateMaybeMessage<::XuChat::GetMultiFileRsp>(Arena*);
template<> ::XuChat::GetMultiFileRsp_FileDataEntry_DoNotUse* Arena::CreateMaybeMessage<::XuChat::GetMultiFileRsp_FileDataEntry_DoNotUse>(Arena*);
template<> ::XuChat::GetSingleFileReq* Arena::CreateMaybeMessage<::XuChat::GetSingleFileReq>(Arena*);
template<> ::XuChat::GetSingleFileRsp* Arena::CreateMaybeMessage<::XuChat::GetSingleFileRsp>(Arena*);
template<> ::XuChat::PutMultiFileReq* Arena::CreateMaybeMessage<::XuChat::PutMultiFileReq>(Arena*);
template<> ::XuChat::PutMultiFileRsp* Arena::CreateMaybeMessage<::XuChat::PutMultiFileRsp>(Arena*);
template<> ::XuChat::PutSingleFileReq* Arena::CreateMaybeMessage<::XuChat::PutSingleFileReq>(Arena*);
template<> ::XuChat::PutSingleFileRsp* Arena::CreateMaybeMessage<::XuChat::PutSingleFileRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XuChat {

// ===================================================================

class GetSingleFileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetSingleFileReq) */ {
 public:
  inline GetSingleFileReq() : GetSingleFileReq(nullptr) {}
  ~GetSingleFileReq() override;
  explicit PROTOBUF_CONSTEXPR GetSingleFileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSingleFileReq(const GetSingleFileReq& from);
  GetSingleFileReq(GetSingleFileReq&& from) noexcept
    : GetSingleFileReq() {
    *this = ::std::move(from);
  }

  inline GetSingleFileReq& operator=(const GetSingleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSingleFileReq& operator=(GetSingleFileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSingleFileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSingleFileReq* internal_default_instance() {
    return reinterpret_cast<const GetSingleFileReq*>(
               &_GetSingleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSingleFileReq& a, GetSingleFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSingleFileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSingleFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSingleFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSingleFileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSingleFileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSingleFileReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleFileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetSingleFileReq";
  }
  protected:
  explicit GetSingleFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kFileIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string file_id = 2;
  void clear_file_id();
  const std::string& file_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_id();
  PROTOBUF_NODISCARD std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // optional string user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetSingleFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class GetSingleFileRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetSingleFileRsp) */ {
 public:
  inline GetSingleFileRsp() : GetSingleFileRsp(nullptr) {}
  ~GetSingleFileRsp() override;
  explicit PROTOBUF_CONSTEXPR GetSingleFileRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSingleFileRsp(const GetSingleFileRsp& from);
  GetSingleFileRsp(GetSingleFileRsp&& from) noexcept
    : GetSingleFileRsp() {
    *this = ::std::move(from);
  }

  inline GetSingleFileRsp& operator=(const GetSingleFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSingleFileRsp& operator=(GetSingleFileRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSingleFileRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSingleFileRsp* internal_default_instance() {
    return reinterpret_cast<const GetSingleFileRsp*>(
               &_GetSingleFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetSingleFileRsp& a, GetSingleFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSingleFileRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSingleFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSingleFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSingleFileRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSingleFileRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSingleFileRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSingleFileRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetSingleFileRsp";
  }
  protected:
  explicit GetSingleFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kFileDataFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional .XuChat.FileDownloadData file_data = 4;
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;
  public:
  void clear_file_data();
  const ::XuChat::FileDownloadData& file_data() const;
  PROTOBUF_NODISCARD ::XuChat::FileDownloadData* release_file_data();
  ::XuChat::FileDownloadData* mutable_file_data();
  void set_allocated_file_data(::XuChat::FileDownloadData* file_data);
  private:
  const ::XuChat::FileDownloadData& _internal_file_data() const;
  ::XuChat::FileDownloadData* _internal_mutable_file_data();
  public:
  void unsafe_arena_set_allocated_file_data(
      ::XuChat::FileDownloadData* file_data);
  ::XuChat::FileDownloadData* unsafe_arena_release_file_data();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetSingleFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::XuChat::FileDownloadData* file_data_;
  bool success_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class GetMultiFileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetMultiFileReq) */ {
 public:
  inline GetMultiFileReq() : GetMultiFileReq(nullptr) {}
  ~GetMultiFileReq() override;
  explicit PROTOBUF_CONSTEXPR GetMultiFileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMultiFileReq(const GetMultiFileReq& from);
  GetMultiFileReq(GetMultiFileReq&& from) noexcept
    : GetMultiFileReq() {
    *this = ::std::move(from);
  }

  inline GetMultiFileReq& operator=(const GetMultiFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultiFileReq& operator=(GetMultiFileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMultiFileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMultiFileReq* internal_default_instance() {
    return reinterpret_cast<const GetMultiFileReq*>(
               &_GetMultiFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMultiFileReq& a, GetMultiFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultiFileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultiFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMultiFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMultiFileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMultiFileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMultiFileReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiFileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetMultiFileReq";
  }
  protected:
  explicit GetMultiFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdListFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // repeated string file_id_list = 4;
  int file_id_list_size() const;
  private:
  int _internal_file_id_list_size() const;
  public:
  void clear_file_id_list();
  const std::string& file_id_list(int index) const;
  std::string* mutable_file_id_list(int index);
  void set_file_id_list(int index, const std::string& value);
  void set_file_id_list(int index, std::string&& value);
  void set_file_id_list(int index, const char* value);
  void set_file_id_list(int index, const char* value, size_t size);
  std::string* add_file_id_list();
  void add_file_id_list(const std::string& value);
  void add_file_id_list(std::string&& value);
  void add_file_id_list(const char* value);
  void add_file_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_id_list();
  private:
  const std::string& _internal_file_id_list(int index) const;
  std::string* _internal_add_file_id_list();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetMultiFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class GetMultiFileRsp_FileDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMultiFileRsp_FileDataEntry_DoNotUse, 
    std::string, ::XuChat::FileDownloadData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMultiFileRsp_FileDataEntry_DoNotUse, 
    std::string, ::XuChat::FileDownloadData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GetMultiFileRsp_FileDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetMultiFileRsp_FileDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetMultiFileRsp_FileDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetMultiFileRsp_FileDataEntry_DoNotUse& other);
  static const GetMultiFileRsp_FileDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetMultiFileRsp_FileDataEntry_DoNotUse*>(&_GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "XuChat.GetMultiFileRsp.FileDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_file_2eproto;
};

// -------------------------------------------------------------------

class GetMultiFileRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.GetMultiFileRsp) */ {
 public:
  inline GetMultiFileRsp() : GetMultiFileRsp(nullptr) {}
  ~GetMultiFileRsp() override;
  explicit PROTOBUF_CONSTEXPR GetMultiFileRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMultiFileRsp(const GetMultiFileRsp& from);
  GetMultiFileRsp(GetMultiFileRsp&& from) noexcept
    : GetMultiFileRsp() {
    *this = ::std::move(from);
  }

  inline GetMultiFileRsp& operator=(const GetMultiFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultiFileRsp& operator=(GetMultiFileRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMultiFileRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMultiFileRsp* internal_default_instance() {
    return reinterpret_cast<const GetMultiFileRsp*>(
               &_GetMultiFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetMultiFileRsp& a, GetMultiFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultiFileRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultiFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMultiFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMultiFileRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMultiFileRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMultiFileRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMultiFileRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.GetMultiFileRsp";
  }
  protected:
  explicit GetMultiFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFileDataFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // map<string, .XuChat.FileDownloadData> file_data = 4;
  int file_data_size() const;
  private:
  int _internal_file_data_size() const;
  public:
  void clear_file_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >&
      _internal_file_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >*
      _internal_mutable_file_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >&
      file_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >*
      mutable_file_data();

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.GetMultiFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetMultiFileRsp_FileDataEntry_DoNotUse,
      std::string, ::XuChat::FileDownloadData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> file_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class PutSingleFileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.PutSingleFileReq) */ {
 public:
  inline PutSingleFileReq() : PutSingleFileReq(nullptr) {}
  ~PutSingleFileReq() override;
  explicit PROTOBUF_CONSTEXPR PutSingleFileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutSingleFileReq(const PutSingleFileReq& from);
  PutSingleFileReq(PutSingleFileReq&& from) noexcept
    : PutSingleFileReq() {
    *this = ::std::move(from);
  }

  inline PutSingleFileReq& operator=(const PutSingleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutSingleFileReq& operator=(PutSingleFileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutSingleFileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutSingleFileReq* internal_default_instance() {
    return reinterpret_cast<const PutSingleFileReq*>(
               &_PutSingleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PutSingleFileReq& a, PutSingleFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PutSingleFileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutSingleFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutSingleFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutSingleFileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutSingleFileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutSingleFileReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutSingleFileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.PutSingleFileReq";
  }
  protected:
  explicit PutSingleFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kFileDataFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .XuChat.FileUploadData file_data = 4;
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;
  public:
  void clear_file_data();
  const ::XuChat::FileUploadData& file_data() const;
  PROTOBUF_NODISCARD ::XuChat::FileUploadData* release_file_data();
  ::XuChat::FileUploadData* mutable_file_data();
  void set_allocated_file_data(::XuChat::FileUploadData* file_data);
  private:
  const ::XuChat::FileUploadData& _internal_file_data() const;
  ::XuChat::FileUploadData* _internal_mutable_file_data();
  public:
  void unsafe_arena_set_allocated_file_data(
      ::XuChat::FileUploadData* file_data);
  ::XuChat::FileUploadData* unsafe_arena_release_file_data();

  // @@protoc_insertion_point(class_scope:XuChat.PutSingleFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::XuChat::FileUploadData* file_data_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class PutSingleFileRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.PutSingleFileRsp) */ {
 public:
  inline PutSingleFileRsp() : PutSingleFileRsp(nullptr) {}
  ~PutSingleFileRsp() override;
  explicit PROTOBUF_CONSTEXPR PutSingleFileRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutSingleFileRsp(const PutSingleFileRsp& from);
  PutSingleFileRsp(PutSingleFileRsp&& from) noexcept
    : PutSingleFileRsp() {
    *this = ::std::move(from);
  }

  inline PutSingleFileRsp& operator=(const PutSingleFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutSingleFileRsp& operator=(PutSingleFileRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutSingleFileRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutSingleFileRsp* internal_default_instance() {
    return reinterpret_cast<const PutSingleFileRsp*>(
               &_PutSingleFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PutSingleFileRsp& a, PutSingleFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PutSingleFileRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutSingleFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutSingleFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutSingleFileRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutSingleFileRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutSingleFileRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutSingleFileRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.PutSingleFileRsp";
  }
  protected:
  explicit PutSingleFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kFileInfoFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .XuChat.FileMessageInfo file_info = 4;
  bool has_file_info() const;
  private:
  bool _internal_has_file_info() const;
  public:
  void clear_file_info();
  const ::XuChat::FileMessageInfo& file_info() const;
  PROTOBUF_NODISCARD ::XuChat::FileMessageInfo* release_file_info();
  ::XuChat::FileMessageInfo* mutable_file_info();
  void set_allocated_file_info(::XuChat::FileMessageInfo* file_info);
  private:
  const ::XuChat::FileMessageInfo& _internal_file_info() const;
  ::XuChat::FileMessageInfo* _internal_mutable_file_info();
  public:
  void unsafe_arena_set_allocated_file_info(
      ::XuChat::FileMessageInfo* file_info);
  ::XuChat::FileMessageInfo* unsafe_arena_release_file_info();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.PutSingleFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::XuChat::FileMessageInfo* file_info_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class PutMultiFileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.PutMultiFileReq) */ {
 public:
  inline PutMultiFileReq() : PutMultiFileReq(nullptr) {}
  ~PutMultiFileReq() override;
  explicit PROTOBUF_CONSTEXPR PutMultiFileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutMultiFileReq(const PutMultiFileReq& from);
  PutMultiFileReq(PutMultiFileReq&& from) noexcept
    : PutMultiFileReq() {
    *this = ::std::move(from);
  }

  inline PutMultiFileReq& operator=(const PutMultiFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutMultiFileReq& operator=(PutMultiFileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutMultiFileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutMultiFileReq* internal_default_instance() {
    return reinterpret_cast<const PutMultiFileReq*>(
               &_PutMultiFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PutMultiFileReq& a, PutMultiFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PutMultiFileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutMultiFileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutMultiFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutMultiFileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutMultiFileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutMultiFileReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMultiFileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.PutMultiFileReq";
  }
  protected:
  explicit PutMultiFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDataFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // repeated .XuChat.FileUploadData file_data = 4;
  int file_data_size() const;
  private:
  int _internal_file_data_size() const;
  public:
  void clear_file_data();
  ::XuChat::FileUploadData* mutable_file_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileUploadData >*
      mutable_file_data();
  private:
  const ::XuChat::FileUploadData& _internal_file_data(int index) const;
  ::XuChat::FileUploadData* _internal_add_file_data();
  public:
  const ::XuChat::FileUploadData& file_data(int index) const;
  ::XuChat::FileUploadData* add_file_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileUploadData >&
      file_data() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // optional string user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:XuChat.PutMultiFileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileUploadData > file_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class PutMultiFileRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuChat.PutMultiFileRsp) */ {
 public:
  inline PutMultiFileRsp() : PutMultiFileRsp(nullptr) {}
  ~PutMultiFileRsp() override;
  explicit PROTOBUF_CONSTEXPR PutMultiFileRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutMultiFileRsp(const PutMultiFileRsp& from);
  PutMultiFileRsp(PutMultiFileRsp&& from) noexcept
    : PutMultiFileRsp() {
    *this = ::std::move(from);
  }

  inline PutMultiFileRsp& operator=(const PutMultiFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutMultiFileRsp& operator=(PutMultiFileRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutMultiFileRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutMultiFileRsp* internal_default_instance() {
    return reinterpret_cast<const PutMultiFileRsp*>(
               &_PutMultiFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PutMultiFileRsp& a, PutMultiFileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PutMultiFileRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutMultiFileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutMultiFileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutMultiFileRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutMultiFileRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PutMultiFileRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMultiFileRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuChat.PutMultiFileRsp";
  }
  protected:
  explicit PutMultiFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileInfoFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // repeated .XuChat.FileMessageInfo file_info = 4;
  int file_info_size() const;
  private:
  int _internal_file_info_size() const;
  public:
  void clear_file_info();
  ::XuChat::FileMessageInfo* mutable_file_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileMessageInfo >*
      mutable_file_info();
  private:
  const ::XuChat::FileMessageInfo& _internal_file_info(int index) const;
  ::XuChat::FileMessageInfo* _internal_add_file_info();
  public:
  const ::XuChat::FileMessageInfo& file_info(int index) const;
  ::XuChat::FileMessageInfo* add_file_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileMessageInfo >&
      file_info() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XuChat.PutMultiFileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileMessageInfo > file_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================

class FileService_Stub;

class FileService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileService() {};
 public:
  virtual ~FileService();

  typedef FileService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetSingleFileReq* request,
                       ::XuChat::GetSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetMultiFileReq* request,
                       ::XuChat::GetMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PutSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::PutSingleFileReq* request,
                       ::XuChat::PutSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void PutMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::PutMultiFileReq* request,
                       ::XuChat::PutMultiFileRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService);
};

class FileService_Stub : public FileService {
 public:
  FileService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FileService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FileService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FileService ------------------------------------------

  void GetSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetSingleFileReq* request,
                       ::XuChat::GetSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  void GetMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::GetMultiFileReq* request,
                       ::XuChat::GetMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
  void PutSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::PutSingleFileReq* request,
                       ::XuChat::PutSingleFileRsp* response,
                       ::google::protobuf::Closure* done);
  void PutMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::XuChat::PutMultiFileReq* request,
                       ::XuChat::PutMultiFileRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSingleFileReq

// string request_id = 1;
inline void GetSingleFileReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetSingleFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileReq.request_id)
}
inline std::string* GetSingleFileReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileReq.request_id)
  return _s;
}
inline const std::string& GetSingleFileReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetSingleFileReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileReq.request_id)
  return request_id_.Release();
}
inline void GetSingleFileReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileReq.request_id)
}

// string file_id = 2;
inline void GetSingleFileReq::clear_file_id() {
  file_id_.ClearToEmpty();
}
inline const std::string& GetSingleFileReq::file_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileReq.file_id)
  return _internal_file_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileReq::set_file_id(ArgT0&& arg0, ArgT... args) {
 
 file_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileReq.file_id)
}
inline std::string* GetSingleFileReq::mutable_file_id() {
  std::string* _s = _internal_mutable_file_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileReq.file_id)
  return _s;
}
inline const std::string& GetSingleFileReq::_internal_file_id() const {
  return file_id_.Get();
}
inline void GetSingleFileReq::_internal_set_file_id(const std::string& value) {
  
  file_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::_internal_mutable_file_id() {
  
  return file_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::release_file_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileReq.file_id)
  return file_id_.Release();
}
inline void GetSingleFileReq::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  file_id_.SetAllocated(file_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_id_.IsDefault()) {
    file_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileReq.file_id)
}

// optional string user_id = 3;
inline bool GetSingleFileReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetSingleFileReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetSingleFileReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetSingleFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileReq.user_id)
}
inline std::string* GetSingleFileReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileReq.user_id)
  return _s;
}
inline const std::string& GetSingleFileReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetSingleFileReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetSingleFileReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileReq.user_id)
}

// optional string session_id = 4;
inline bool GetSingleFileReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetSingleFileReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetSingleFileReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetSingleFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileReq.session_id)
}
inline std::string* GetSingleFileReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileReq.session_id)
  return _s;
}
inline const std::string& GetSingleFileReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetSingleFileReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetSingleFileReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileReq.session_id)
}

// -------------------------------------------------------------------

// GetSingleFileRsp

// string request_id = 1;
inline void GetSingleFileRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetSingleFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileRsp.request_id)
}
inline std::string* GetSingleFileRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileRsp.request_id)
  return _s;
}
inline const std::string& GetSingleFileRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetSingleFileRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileRsp.request_id)
  return request_id_.Release();
}
inline void GetSingleFileRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileRsp.request_id)
}

// bool success = 2;
inline void GetSingleFileRsp::clear_success() {
  success_ = false;
}
inline bool GetSingleFileRsp::_internal_success() const {
  return success_;
}
inline bool GetSingleFileRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileRsp.success)
  return _internal_success();
}
inline void GetSingleFileRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetSingleFileRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileRsp.success)
}

// string errmsg = 3;
inline void GetSingleFileRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GetSingleFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSingleFileRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetSingleFileRsp.errmsg)
}
inline std::string* GetSingleFileRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileRsp.errmsg)
  return _s;
}
inline const std::string& GetSingleFileRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetSingleFileRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSingleFileRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSingleFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileRsp.errmsg)
  return errmsg_.Release();
}
inline void GetSingleFileRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileRsp.errmsg)
}

// optional .XuChat.FileDownloadData file_data = 4;
inline bool GetSingleFileRsp::_internal_has_file_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || file_data_ != nullptr);
  return value;
}
inline bool GetSingleFileRsp::has_file_data() const {
  return _internal_has_file_data();
}
inline const ::XuChat::FileDownloadData& GetSingleFileRsp::_internal_file_data() const {
  const ::XuChat::FileDownloadData* p = file_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuChat::FileDownloadData&>(
      ::XuChat::_FileDownloadData_default_instance_);
}
inline const ::XuChat::FileDownloadData& GetSingleFileRsp::file_data() const {
  // @@protoc_insertion_point(field_get:XuChat.GetSingleFileRsp.file_data)
  return _internal_file_data();
}
inline void GetSingleFileRsp::unsafe_arena_set_allocated_file_data(
    ::XuChat::FileDownloadData* file_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data_);
  }
  file_data_ = file_data;
  if (file_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuChat.GetSingleFileRsp.file_data)
}
inline ::XuChat::FileDownloadData* GetSingleFileRsp::release_file_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::XuChat::FileDownloadData* temp = file_data_;
  file_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuChat::FileDownloadData* GetSingleFileRsp::unsafe_arena_release_file_data() {
  // @@protoc_insertion_point(field_release:XuChat.GetSingleFileRsp.file_data)
  _has_bits_[0] &= ~0x00000001u;
  ::XuChat::FileDownloadData* temp = file_data_;
  file_data_ = nullptr;
  return temp;
}
inline ::XuChat::FileDownloadData* GetSingleFileRsp::_internal_mutable_file_data() {
  _has_bits_[0] |= 0x00000001u;
  if (file_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuChat::FileDownloadData>(GetArenaForAllocation());
    file_data_ = p;
  }
  return file_data_;
}
inline ::XuChat::FileDownloadData* GetSingleFileRsp::mutable_file_data() {
  ::XuChat::FileDownloadData* _msg = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:XuChat.GetSingleFileRsp.file_data)
  return _msg;
}
inline void GetSingleFileRsp::set_allocated_file_data(::XuChat::FileDownloadData* file_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data_);
  }
  if (file_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data));
    if (message_arena != submessage_arena) {
      file_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_data_ = file_data;
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetSingleFileRsp.file_data)
}

// -------------------------------------------------------------------

// GetMultiFileReq

// string request_id = 1;
inline void GetMultiFileReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetMultiFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMultiFileReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileReq.request_id)
}
inline std::string* GetMultiFileReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileReq.request_id)
  return _s;
}
inline const std::string& GetMultiFileReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetMultiFileReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetMultiFileReq.request_id)
  return request_id_.Release();
}
inline void GetMultiFileReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetMultiFileReq.request_id)
}

// optional string user_id = 2;
inline bool GetMultiFileReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMultiFileReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetMultiFileReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetMultiFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMultiFileReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileReq.user_id)
}
inline std::string* GetMultiFileReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileReq.user_id)
  return _s;
}
inline const std::string& GetMultiFileReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetMultiFileReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetMultiFileReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetMultiFileReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetMultiFileReq.user_id)
}

// optional string session_id = 3;
inline bool GetMultiFileReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMultiFileReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void GetMultiFileReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetMultiFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMultiFileReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileReq.session_id)
}
inline std::string* GetMultiFileReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileReq.session_id)
  return _s;
}
inline const std::string& GetMultiFileReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void GetMultiFileReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMultiFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetMultiFileReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetMultiFileReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetMultiFileReq.session_id)
}

// repeated string file_id_list = 4;
inline int GetMultiFileReq::_internal_file_id_list_size() const {
  return file_id_list_.size();
}
inline int GetMultiFileReq::file_id_list_size() const {
  return _internal_file_id_list_size();
}
inline void GetMultiFileReq::clear_file_id_list() {
  file_id_list_.Clear();
}
inline std::string* GetMultiFileReq::add_file_id_list() {
  std::string* _s = _internal_add_file_id_list();
  // @@protoc_insertion_point(field_add_mutable:XuChat.GetMultiFileReq.file_id_list)
  return _s;
}
inline const std::string& GetMultiFileReq::_internal_file_id_list(int index) const {
  return file_id_list_.Get(index);
}
inline const std::string& GetMultiFileReq::file_id_list(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileReq.file_id_list)
  return _internal_file_id_list(index);
}
inline std::string* GetMultiFileReq::mutable_file_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileReq.file_id_list)
  return file_id_list_.Mutable(index);
}
inline void GetMultiFileReq::set_file_id_list(int index, const std::string& value) {
  file_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::set_file_id_list(int index, std::string&& value) {
  file_id_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::set_file_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::set_file_id_list(int index, const char* value, size_t size) {
  file_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XuChat.GetMultiFileReq.file_id_list)
}
inline std::string* GetMultiFileReq::_internal_add_file_id_list() {
  return file_id_list_.Add();
}
inline void GetMultiFileReq::add_file_id_list(const std::string& value) {
  file_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::add_file_id_list(std::string&& value) {
  file_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::add_file_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XuChat.GetMultiFileReq.file_id_list)
}
inline void GetMultiFileReq::add_file_id_list(const char* value, size_t size) {
  file_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XuChat.GetMultiFileReq.file_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMultiFileReq::file_id_list() const {
  // @@protoc_insertion_point(field_list:XuChat.GetMultiFileReq.file_id_list)
  return file_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMultiFileReq::mutable_file_id_list() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.GetMultiFileReq.file_id_list)
  return &file_id_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetMultiFileRsp

// string request_id = 1;
inline void GetMultiFileRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetMultiFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMultiFileRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileRsp.request_id)
}
inline std::string* GetMultiFileRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileRsp.request_id)
  return _s;
}
inline const std::string& GetMultiFileRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetMultiFileRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMultiFileRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMultiFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.GetMultiFileRsp.request_id)
  return request_id_.Release();
}
inline void GetMultiFileRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetMultiFileRsp.request_id)
}

// bool success = 2;
inline void GetMultiFileRsp::clear_success() {
  success_ = false;
}
inline bool GetMultiFileRsp::_internal_success() const {
  return success_;
}
inline bool GetMultiFileRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileRsp.success)
  return _internal_success();
}
inline void GetMultiFileRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetMultiFileRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileRsp.success)
}

// string errmsg = 3;
inline void GetMultiFileRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& GetMultiFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.GetMultiFileRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMultiFileRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.GetMultiFileRsp.errmsg)
}
inline std::string* GetMultiFileRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.GetMultiFileRsp.errmsg)
  return _s;
}
inline const std::string& GetMultiFileRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void GetMultiFileRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMultiFileRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMultiFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.GetMultiFileRsp.errmsg)
  return errmsg_.Release();
}
inline void GetMultiFileRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.GetMultiFileRsp.errmsg)
}

// map<string, .XuChat.FileDownloadData> file_data = 4;
inline int GetMultiFileRsp::_internal_file_data_size() const {
  return file_data_.size();
}
inline int GetMultiFileRsp::file_data_size() const {
  return _internal_file_data_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >&
GetMultiFileRsp::_internal_file_data() const {
  return file_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >&
GetMultiFileRsp::file_data() const {
  // @@protoc_insertion_point(field_map:XuChat.GetMultiFileRsp.file_data)
  return _internal_file_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >*
GetMultiFileRsp::_internal_mutable_file_data() {
  return file_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XuChat::FileDownloadData >*
GetMultiFileRsp::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable_map:XuChat.GetMultiFileRsp.file_data)
  return _internal_mutable_file_data();
}

// -------------------------------------------------------------------

// PutSingleFileReq

// string request_id = 1;
inline void PutSingleFileReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& PutSingleFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutSingleFileReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileReq.request_id)
}
inline std::string* PutSingleFileReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileReq.request_id)
  return _s;
}
inline const std::string& PutSingleFileReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void PutSingleFileReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileReq.request_id)
  return request_id_.Release();
}
inline void PutSingleFileReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileReq.request_id)
}

// optional string user_id = 2;
inline bool PutSingleFileReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutSingleFileReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void PutSingleFileReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutSingleFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutSingleFileReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileReq.user_id)
}
inline std::string* PutSingleFileReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileReq.user_id)
  return _s;
}
inline const std::string& PutSingleFileReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void PutSingleFileReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PutSingleFileReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileReq.user_id)
}

// optional string session_id = 3;
inline bool PutSingleFileReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PutSingleFileReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void PutSingleFileReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutSingleFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutSingleFileReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileReq.session_id)
}
inline std::string* PutSingleFileReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileReq.session_id)
  return _s;
}
inline const std::string& PutSingleFileReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void PutSingleFileReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutSingleFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PutSingleFileReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileReq.session_id)
}

// .XuChat.FileUploadData file_data = 4;
inline bool PutSingleFileReq::_internal_has_file_data() const {
  return this != internal_default_instance() && file_data_ != nullptr;
}
inline bool PutSingleFileReq::has_file_data() const {
  return _internal_has_file_data();
}
inline const ::XuChat::FileUploadData& PutSingleFileReq::_internal_file_data() const {
  const ::XuChat::FileUploadData* p = file_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuChat::FileUploadData&>(
      ::XuChat::_FileUploadData_default_instance_);
}
inline const ::XuChat::FileUploadData& PutSingleFileReq::file_data() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileReq.file_data)
  return _internal_file_data();
}
inline void PutSingleFileReq::unsafe_arena_set_allocated_file_data(
    ::XuChat::FileUploadData* file_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data_);
  }
  file_data_ = file_data;
  if (file_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuChat.PutSingleFileReq.file_data)
}
inline ::XuChat::FileUploadData* PutSingleFileReq::release_file_data() {
  
  ::XuChat::FileUploadData* temp = file_data_;
  file_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuChat::FileUploadData* PutSingleFileReq::unsafe_arena_release_file_data() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileReq.file_data)
  
  ::XuChat::FileUploadData* temp = file_data_;
  file_data_ = nullptr;
  return temp;
}
inline ::XuChat::FileUploadData* PutSingleFileReq::_internal_mutable_file_data() {
  
  if (file_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuChat::FileUploadData>(GetArenaForAllocation());
    file_data_ = p;
  }
  return file_data_;
}
inline ::XuChat::FileUploadData* PutSingleFileReq::mutable_file_data() {
  ::XuChat::FileUploadData* _msg = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileReq.file_data)
  return _msg;
}
inline void PutSingleFileReq::set_allocated_file_data(::XuChat::FileUploadData* file_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data_);
  }
  if (file_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_data));
    if (message_arena != submessage_arena) {
      file_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_data, submessage_arena);
    }
    
  } else {
    
  }
  file_data_ = file_data;
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileReq.file_data)
}

// -------------------------------------------------------------------

// PutSingleFileRsp

// string request_id = 1;
inline void PutSingleFileRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& PutSingleFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutSingleFileRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileRsp.request_id)
}
inline std::string* PutSingleFileRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileRsp.request_id)
  return _s;
}
inline const std::string& PutSingleFileRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void PutSingleFileRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutSingleFileRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutSingleFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileRsp.request_id)
  return request_id_.Release();
}
inline void PutSingleFileRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileRsp.request_id)
}

// bool success = 2;
inline void PutSingleFileRsp::clear_success() {
  success_ = false;
}
inline bool PutSingleFileRsp::_internal_success() const {
  return success_;
}
inline bool PutSingleFileRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileRsp.success)
  return _internal_success();
}
inline void PutSingleFileRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PutSingleFileRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileRsp.success)
}

// string errmsg = 3;
inline void PutSingleFileRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& PutSingleFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutSingleFileRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutSingleFileRsp.errmsg)
}
inline std::string* PutSingleFileRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileRsp.errmsg)
  return _s;
}
inline const std::string& PutSingleFileRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PutSingleFileRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* PutSingleFileRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* PutSingleFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileRsp.errmsg)
  return errmsg_.Release();
}
inline void PutSingleFileRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileRsp.errmsg)
}

// .XuChat.FileMessageInfo file_info = 4;
inline bool PutSingleFileRsp::_internal_has_file_info() const {
  return this != internal_default_instance() && file_info_ != nullptr;
}
inline bool PutSingleFileRsp::has_file_info() const {
  return _internal_has_file_info();
}
inline const ::XuChat::FileMessageInfo& PutSingleFileRsp::_internal_file_info() const {
  const ::XuChat::FileMessageInfo* p = file_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuChat::FileMessageInfo&>(
      ::XuChat::_FileMessageInfo_default_instance_);
}
inline const ::XuChat::FileMessageInfo& PutSingleFileRsp::file_info() const {
  // @@protoc_insertion_point(field_get:XuChat.PutSingleFileRsp.file_info)
  return _internal_file_info();
}
inline void PutSingleFileRsp::unsafe_arena_set_allocated_file_info(
    ::XuChat::FileMessageInfo* file_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_info_);
  }
  file_info_ = file_info;
  if (file_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuChat.PutSingleFileRsp.file_info)
}
inline ::XuChat::FileMessageInfo* PutSingleFileRsp::release_file_info() {
  
  ::XuChat::FileMessageInfo* temp = file_info_;
  file_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuChat::FileMessageInfo* PutSingleFileRsp::unsafe_arena_release_file_info() {
  // @@protoc_insertion_point(field_release:XuChat.PutSingleFileRsp.file_info)
  
  ::XuChat::FileMessageInfo* temp = file_info_;
  file_info_ = nullptr;
  return temp;
}
inline ::XuChat::FileMessageInfo* PutSingleFileRsp::_internal_mutable_file_info() {
  
  if (file_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuChat::FileMessageInfo>(GetArenaForAllocation());
    file_info_ = p;
  }
  return file_info_;
}
inline ::XuChat::FileMessageInfo* PutSingleFileRsp::mutable_file_info() {
  ::XuChat::FileMessageInfo* _msg = _internal_mutable_file_info();
  // @@protoc_insertion_point(field_mutable:XuChat.PutSingleFileRsp.file_info)
  return _msg;
}
inline void PutSingleFileRsp::set_allocated_file_info(::XuChat::FileMessageInfo* file_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_info_);
  }
  if (file_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_info));
    if (message_arena != submessage_arena) {
      file_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    
  } else {
    
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutSingleFileRsp.file_info)
}

// -------------------------------------------------------------------

// PutMultiFileReq

// string request_id = 1;
inline void PutMultiFileReq::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& PutMultiFileReq::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileReq.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutMultiFileReq::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileReq.request_id)
}
inline std::string* PutMultiFileReq::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileReq.request_id)
  return _s;
}
inline const std::string& PutMultiFileReq::_internal_request_id() const {
  return request_id_.Get();
}
inline void PutMultiFileReq::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutMultiFileReq.request_id)
  return request_id_.Release();
}
inline void PutMultiFileReq::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutMultiFileReq.request_id)
}

// optional string user_id = 2;
inline bool PutMultiFileReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutMultiFileReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void PutMultiFileReq::clear_user_id() {
  user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutMultiFileReq::user_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileReq.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutMultiFileReq::set_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileReq.user_id)
}
inline std::string* PutMultiFileReq::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileReq.user_id)
  return _s;
}
inline const std::string& PutMultiFileReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void PutMultiFileReq::_internal_set_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::_internal_mutable_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::release_user_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutMultiFileReq.user_id)
  if (!_internal_has_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PutMultiFileReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutMultiFileReq.user_id)
}

// optional string session_id = 3;
inline bool PutMultiFileReq::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PutMultiFileReq::has_session_id() const {
  return _internal_has_session_id();
}
inline void PutMultiFileReq::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutMultiFileReq::session_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileReq.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutMultiFileReq::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileReq.session_id)
}
inline std::string* PutMultiFileReq::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileReq.session_id)
  return _s;
}
inline const std::string& PutMultiFileReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void PutMultiFileReq::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000002u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutMultiFileReq::release_session_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutMultiFileReq.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PutMultiFileReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutMultiFileReq.session_id)
}

// repeated .XuChat.FileUploadData file_data = 4;
inline int PutMultiFileReq::_internal_file_data_size() const {
  return file_data_.size();
}
inline int PutMultiFileReq::file_data_size() const {
  return _internal_file_data_size();
}
inline ::XuChat::FileUploadData* PutMultiFileReq::mutable_file_data(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileReq.file_data)
  return file_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileUploadData >*
PutMultiFileReq::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.PutMultiFileReq.file_data)
  return &file_data_;
}
inline const ::XuChat::FileUploadData& PutMultiFileReq::_internal_file_data(int index) const {
  return file_data_.Get(index);
}
inline const ::XuChat::FileUploadData& PutMultiFileReq::file_data(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileReq.file_data)
  return _internal_file_data(index);
}
inline ::XuChat::FileUploadData* PutMultiFileReq::_internal_add_file_data() {
  return file_data_.Add();
}
inline ::XuChat::FileUploadData* PutMultiFileReq::add_file_data() {
  ::XuChat::FileUploadData* _add = _internal_add_file_data();
  // @@protoc_insertion_point(field_add:XuChat.PutMultiFileReq.file_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileUploadData >&
PutMultiFileReq::file_data() const {
  // @@protoc_insertion_point(field_list:XuChat.PutMultiFileReq.file_data)
  return file_data_;
}

// -------------------------------------------------------------------

// PutMultiFileRsp

// string request_id = 1;
inline void PutMultiFileRsp::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& PutMultiFileRsp::request_id() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileRsp.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutMultiFileRsp::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileRsp.request_id)
}
inline std::string* PutMultiFileRsp::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileRsp.request_id)
  return _s;
}
inline const std::string& PutMultiFileRsp::_internal_request_id() const {
  return request_id_.Get();
}
inline void PutMultiFileRsp::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PutMultiFileRsp::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PutMultiFileRsp::release_request_id() {
  // @@protoc_insertion_point(field_release:XuChat.PutMultiFileRsp.request_id)
  return request_id_.Release();
}
inline void PutMultiFileRsp::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutMultiFileRsp.request_id)
}

// bool success = 2;
inline void PutMultiFileRsp::clear_success() {
  success_ = false;
}
inline bool PutMultiFileRsp::_internal_success() const {
  return success_;
}
inline bool PutMultiFileRsp::success() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileRsp.success)
  return _internal_success();
}
inline void PutMultiFileRsp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PutMultiFileRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileRsp.success)
}

// string errmsg = 3;
inline void PutMultiFileRsp::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& PutMultiFileRsp::errmsg() const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileRsp.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutMultiFileRsp::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuChat.PutMultiFileRsp.errmsg)
}
inline std::string* PutMultiFileRsp::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileRsp.errmsg)
  return _s;
}
inline const std::string& PutMultiFileRsp::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void PutMultiFileRsp::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* PutMultiFileRsp::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* PutMultiFileRsp::release_errmsg() {
  // @@protoc_insertion_point(field_release:XuChat.PutMultiFileRsp.errmsg)
  return errmsg_.Release();
}
inline void PutMultiFileRsp::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault()) {
    errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuChat.PutMultiFileRsp.errmsg)
}

// repeated .XuChat.FileMessageInfo file_info = 4;
inline int PutMultiFileRsp::_internal_file_info_size() const {
  return file_info_.size();
}
inline int PutMultiFileRsp::file_info_size() const {
  return _internal_file_info_size();
}
inline ::XuChat::FileMessageInfo* PutMultiFileRsp::mutable_file_info(int index) {
  // @@protoc_insertion_point(field_mutable:XuChat.PutMultiFileRsp.file_info)
  return file_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileMessageInfo >*
PutMultiFileRsp::mutable_file_info() {
  // @@protoc_insertion_point(field_mutable_list:XuChat.PutMultiFileRsp.file_info)
  return &file_info_;
}
inline const ::XuChat::FileMessageInfo& PutMultiFileRsp::_internal_file_info(int index) const {
  return file_info_.Get(index);
}
inline const ::XuChat::FileMessageInfo& PutMultiFileRsp::file_info(int index) const {
  // @@protoc_insertion_point(field_get:XuChat.PutMultiFileRsp.file_info)
  return _internal_file_info(index);
}
inline ::XuChat::FileMessageInfo* PutMultiFileRsp::_internal_add_file_info() {
  return file_info_.Add();
}
inline ::XuChat::FileMessageInfo* PutMultiFileRsp::add_file_info() {
  ::XuChat::FileMessageInfo* _add = _internal_add_file_info();
  // @@protoc_insertion_point(field_add:XuChat.PutMultiFileRsp.file_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XuChat::FileMessageInfo >&
PutMultiFileRsp::file_info() const {
  // @@protoc_insertion_point(field_list:XuChat.PutMultiFileRsp.file_info)
  return file_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XuChat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
